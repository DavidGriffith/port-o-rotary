   1               		.file	"Blue_Rotary-v3.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  14               	uart_putchar:
  15               	.LFB15:
  16               		.file 1 "Blue_Rotary-v3.c"
   1:Blue_Rotary-v3.c **** #include <stdlib.h>
   2:Blue_Rotary-v3.c **** #include <stdio.h>
   3:Blue_Rotary-v3.c **** #include <ctype.h>
   4:Blue_Rotary-v3.c **** #include <util/delay.h>
   5:Blue_Rotary-v3.c **** #include <avr/io.h>
   6:Blue_Rotary-v3.c **** #include <avr/interrupt.h>
   7:Blue_Rotary-v3.c **** #include <avr/pgmspace.h>
   8:Blue_Rotary-v3.c **** #include "BlueRotary.h"
   9:Blue_Rotary-v3.c **** 
  10:Blue_Rotary-v3.c **** //================================================================
  11:Blue_Rotary-v3.c **** //Define Global Variables
  12:Blue_Rotary-v3.c **** //================================================================
  13:Blue_Rotary-v3.c **** volatile char message[MAX_MESSAGE_LENGTH];	//Buffer for UART messages
  14:Blue_Rotary-v3.c **** volatile char message_complete, ring_tone_flag;	//general purpse flags
  15:Blue_Rotary-v3.c **** char final_message[MAX_MESSAGE_LENGTH];	//Final buffer for UART messages
  16:Blue_Rotary-v3.c **** volatile int message_index=0;
  17:Blue_Rotary-v3.c **** int dialed_number, counter;
  18:Blue_Rotary-v3.c **** int get_number_timeout=0;
  19:Blue_Rotary-v3.c **** char number_length, temp;
  20:Blue_Rotary-v3.c **** char phone_number[20];
  21:Blue_Rotary-v3.c **** int connected=0;
  22:Blue_Rotary-v3.c **** unsigned location_350=0, location_440=0;
  23:Blue_Rotary-v3.c **** 
  24:Blue_Rotary-v3.c **** //================================================================
  25:Blue_Rotary-v3.c **** ISR (USART_RX_vect)		//USART Receive Interrupt
  26:Blue_Rotary-v3.c **** {
  27:Blue_Rotary-v3.c **** 	char character=0;
  28:Blue_Rotary-v3.c **** 	cli();		//Disable Interrupts
  29:Blue_Rotary-v3.c **** 	
  30:Blue_Rotary-v3.c **** 	character=UDR0;	//Copy the character in the UART
  31:Blue_Rotary-v3.c **** 	//Make sure we have received a valid character before copying it to the buffer
  32:Blue_Rotary-v3.c **** 	if(isascii(character) || character==':' || character=='\n')message[message_index]=character;
  33:Blue_Rotary-v3.c **** 	//Check to see if we've received the last character in a message
  34:Blue_Rotary-v3.c **** 	if(message[message_index]=='\n' || message[message_index]=='\r'){
  35:Blue_Rotary-v3.c **** 		message_complete=1;
  36:Blue_Rotary-v3.c **** 	}
  37:Blue_Rotary-v3.c **** 	else{
  38:Blue_Rotary-v3.c **** 		message_index++;
  39:Blue_Rotary-v3.c **** 	}
  40:Blue_Rotary-v3.c **** 	sei();	//Enable Interrupts
  41:Blue_Rotary-v3.c **** }
  42:Blue_Rotary-v3.c **** 
  43:Blue_Rotary-v3.c **** //ISR (SIG_OUTPUT_COMPARE1B)	//Timer Interrupt used to generate a ringtone
  44:Blue_Rotary-v3.c **** ISR(TIMER0_OVF_vect)
  45:Blue_Rotary-v3.c **** {
  46:Blue_Rotary-v3.c **** 	cli();
  47:Blue_Rotary-v3.c ****     sbi(PORTD,DT1);
  48:Blue_Rotary-v3.c ****     sbi(PORTD,DT2);
  49:Blue_Rotary-v3.c **** 	sei();
  50:Blue_Rotary-v3.c **** }
  51:Blue_Rotary-v3.c **** 
  52:Blue_Rotary-v3.c **** ISR(TIMER0_COMPA_vect)
  53:Blue_Rotary-v3.c **** {
  54:Blue_Rotary-v3.c ****     cli();
  55:Blue_Rotary-v3.c ****     cbi(PORTD,DT1);
  56:Blue_Rotary-v3.c ****     OCR0A = pgm_read_byte(&(sine_table[(location_350 >> STEP_SHIFT)]));
  57:Blue_Rotary-v3.c ****     location_350 += STEP_350;
  58:Blue_Rotary-v3.c ****     if(location_350 >= (SINE_SAMPLES << STEP_SHIFT)) location_350 -= (SINE_SAMPLES << STEP_SHIFT);
  59:Blue_Rotary-v3.c ****     sei();
  60:Blue_Rotary-v3.c **** }
  61:Blue_Rotary-v3.c **** 
  62:Blue_Rotary-v3.c **** ISR(TIMER0_COMPB_vect)
  63:Blue_Rotary-v3.c **** {
  64:Blue_Rotary-v3.c ****     cli();
  65:Blue_Rotary-v3.c ****     cbi(PORTD,DT2);
  66:Blue_Rotary-v3.c ****     OCR0B = pgm_read_byte(&(sine_table[(location_440 >> STEP_SHIFT)]));
  67:Blue_Rotary-v3.c ****     location_440 += STEP_440;
  68:Blue_Rotary-v3.c ****     if(location_440 >= (SINE_SAMPLES << STEP_SHIFT)) location_440 -= (SINE_SAMPLES << STEP_SHIFT);
  69:Blue_Rotary-v3.c ****     sei();
  70:Blue_Rotary-v3.c **** }
  71:Blue_Rotary-v3.c **** 
  72:Blue_Rotary-v3.c **** 
  73:Blue_Rotary-v3.c **** int main (void)
  74:Blue_Rotary-v3.c **** {	
  75:Blue_Rotary-v3.c **** 	//Initialize AVR I/O, UART and Interrupts
  76:Blue_Rotary-v3.c ****     ioinit();
  77:Blue_Rotary-v3.c **** 
  78:Blue_Rotary-v3.c **** 	//Turn on the bluetooth module
  79:Blue_Rotary-v3.c **** 	cbi(PORTD, BT_RES);	//Bring module out of reset 
  80:Blue_Rotary-v3.c **** 	sbi(PORTC, BT_EN);	//Enable module
  81:Blue_Rotary-v3.c **** 	LED_ON();
  82:Blue_Rotary-v3.c **** 	_delay_ms(500);		//Allow module to stabilize
  83:Blue_Rotary-v3.c **** 	LED_OFF();
  84:Blue_Rotary-v3.c **** 	cbi(PORTC, RING_PWR);//Let the ringer "Warm Up"
  85:Blue_Rotary-v3.c **** 	_delay_ms(2000);
  86:Blue_Rotary-v3.c **** 	config_bluetooth();	//Put Blue Giga WT32 module into HFP mode
  87:Blue_Rotary-v3.c **** 	short_ring_it();	//Give notification to user that bootup process is complete
  88:Blue_Rotary-v3.c **** 	while(1){
  89:Blue_Rotary-v3.c **** 	
  90:Blue_Rotary-v3.c **** 	
  91:Blue_Rotary-v3.c **** 		while(!connected)	//Until we're connected to a phone, listen for incoming connections
  92:Blue_Rotary-v3.c **** 		{				
  93:Blue_Rotary-v3.c **** 			LED_ON();
  94:Blue_Rotary-v3.c **** 
  95:Blue_Rotary-v3.c **** 			//Clear the message buffers
  96:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
  97:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
  98:Blue_Rotary-v3.c **** 			message_index=0;
  99:Blue_Rotary-v3.c **** 			message_complete=0;		
 100:Blue_Rotary-v3.c **** 			
 101:Blue_Rotary-v3.c **** 			sei();		//Start looking for messages from Bluetooth
 102:Blue_Rotary-v3.c **** 			//Wait for A message
 103:Blue_Rotary-v3.c **** 			while(!message_complete){	//NOTE: Message is received in the UART interrupt
 104:Blue_Rotary-v3.c **** 				_delay_ms(400);
 105:Blue_Rotary-v3.c **** 				LED_OFF();
 106:Blue_Rotary-v3.c **** 				_delay_ms(100);
 107:Blue_Rotary-v3.c **** 				LED_ON();
 108:Blue_Rotary-v3.c **** 			}
 109:Blue_Rotary-v3.c **** 			cli();		//Stop looking for messages while we process this one!
 110:Blue_Rotary-v3.c **** 			
 111:Blue_Rotary-v3.c **** 			message_complete=0;
 112:Blue_Rotary-v3.c **** 			message_index=0;
 113:Blue_Rotary-v3.c **** 			//Copy the received message into a final message string
 114:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];			
 115:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 116:Blue_Rotary-v3.c **** 			
 117:Blue_Rotary-v3.c **** 			//If we get a RING 0 event then we are "connected"
 118:Blue_Rotary-v3.c **** 			if(string_compare(final_message, "RING")){			
 119:Blue_Rotary-v3.c **** 				connected=1;	//Set the connected flag to notify program of status
 120:Blue_Rotary-v3.c **** 				short_ring_it();	//Give user notification of established connection
 121:Blue_Rotary-v3.c **** 				_delay_ms(250);
 122:Blue_Rotary-v3.c **** 				short_ring_it();
 123:Blue_Rotary-v3.c **** 			}
 124:Blue_Rotary-v3.c **** 
 125:Blue_Rotary-v3.c **** 		}
 126:Blue_Rotary-v3.c **** 		
 127:Blue_Rotary-v3.c **** 		while(connected){	//If we're connected, stay in this 'routine' until we're disconnected
 128:Blue_Rotary-v3.c **** 			LED_ON();
 129:Blue_Rotary-v3.c **** 			sei();
 130:Blue_Rotary-v3.c **** 			while((PINC & (1<<HOOK))!=(1<<HOOK)) //Wait for user to lift phone off hook
 131:Blue_Rotary-v3.c **** 			{
 132:Blue_Rotary-v3.c **** 				//If we receive a message while the phone is on the hook then evaluate it!
 133:Blue_Rotary-v3.c **** 				if(message_complete){
 134:Blue_Rotary-v3.c **** 					cli();
 135:Blue_Rotary-v3.c **** 					message_complete=0;
 136:Blue_Rotary-v3.c **** 					message_index=0;
 137:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 138:Blue_Rotary-v3.c **** 					LED_OFF();
 139:Blue_Rotary-v3.c **** 					sei();
 140:Blue_Rotary-v3.c **** 					//Check to see if we're receiving an incoming call
 141:Blue_Rotary-v3.c **** 					if(string_compare(final_message, "HFP 0 RING")){
 142:Blue_Rotary-v3.c **** 						incoming_call();	//If we're getting a RING, then answer the phone
 143:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 144:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 145:Blue_Rotary-v3.c **** 					}
 146:Blue_Rotary-v3.c **** 					//Check to see if the BT connection has been lost
 147:Blue_Rotary-v3.c **** 					if(string_compare(final_message, "NO CARRIER 0")){
 148:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 149:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 150:Blue_Rotary-v3.c **** 						connected=0;	//We're no longer connected to a BT module!
 151:Blue_Rotary-v3.c **** 						message_complete=0;
 152:Blue_Rotary-v3.c **** 						_delay_ms(200);
 153:Blue_Rotary-v3.c **** 						break;	//If we lose the bluetooth connection, start searching again
 154:Blue_Rotary-v3.c **** 					}
 155:Blue_Rotary-v3.c **** 				}
 156:Blue_Rotary-v3.c **** 				
 157:Blue_Rotary-v3.c **** 			}
 158:Blue_Rotary-v3.c **** 			
 159:Blue_Rotary-v3.c **** 			//If the phone is taken off the hook, place a call
 160:Blue_Rotary-v3.c **** 			if(PINC & (1<<HOOK)){
 161:Blue_Rotary-v3.c **** 				place_call(); //We need to dial out
 162:Blue_Rotary-v3.c **** 			}			
 163:Blue_Rotary-v3.c **** 		}
 164:Blue_Rotary-v3.c **** 	}	
 165:Blue_Rotary-v3.c **** 		
 166:Blue_Rotary-v3.c ****     return (0);
 167:Blue_Rotary-v3.c **** }
 168:Blue_Rotary-v3.c **** 
 169:Blue_Rotary-v3.c **** //==================================================
 170:Blue_Rotary-v3.c **** //Core functions
 171:Blue_Rotary-v3.c **** //==================================================
 172:Blue_Rotary-v3.c **** //Function: ioinit
 173:Blue_Rotary-v3.c **** //Purpose:	Initialize AVR I/O, UART and Interrupts
 174:Blue_Rotary-v3.c **** //Inputs:	None
 175:Blue_Rotary-v3.c **** //Outputs:	None
 176:Blue_Rotary-v3.c **** void ioinit(void)
 177:Blue_Rotary-v3.c **** {
 178:Blue_Rotary-v3.c ****     //1 = output, 0 = input
 179:Blue_Rotary-v3.c **** 	DDRB = (1<<CS) | (1<<SCK) | (1<<MOSI);										//Define Port B GPIO Outputs
 180:Blue_Rotary-v3.c ****     PORTB = (1<<MISO);
 181:Blue_Rotary-v3.c **** 	DDRB &= ~(1<<MISO);
 182:Blue_Rotary-v3.c **** 	
 183:Blue_Rotary-v3.c **** 	DDRC = (1<<BT_EN) | (1<<RING_PWR) | (1<<RING1) | (1<<RING2) |  (1<<PSTAT); 	//Define Port C Output
 184:Blue_Rotary-v3.c **** 	PORTC = (1<<HOOK);
 185:Blue_Rotary-v3.c **** 	DDRC &= ~(1<<HOOK);															//Define Port C Inputs
 186:Blue_Rotary-v3.c **** 	
 187:Blue_Rotary-v3.c **** 	DDRD = (1<<DT1) | (1<<DT2) | (1<< BT_RES);										//Define Port D Outputs
 188:Blue_Rotary-v3.c **** 	PORTD = (1<<ROTARY) | (1<<EROTARY);	
 189:Blue_Rotary-v3.c ****     DDRD &= ~((1<<ROTARY)|(1<<EROTARY));								//Define Port D inputs
 190:Blue_Rotary-v3.c **** 
 191:Blue_Rotary-v3.c ****     //SPI Bus setup
 192:Blue_Rotary-v3.c **** 	//SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<CPOL)|(1<<SPR0);	//Might need to change the phase
 193:Blue_Rotary-v3.c **** 	
 194:Blue_Rotary-v3.c **** 	// USART Baud rate: 57600 (With 8 MHz Clock)
 195:Blue_Rotary-v3.c ****     UBRR0H = (MYUBRR >> 8) & 0x7F;	//Make sure highest bit(URSEL) is 0 indicating we are writing to
 196:Blue_Rotary-v3.c **** 	UBRR0L = MYUBRR;
 197:Blue_Rotary-v3.c ****     UCSR0A = (1<<U2X0);	
 198:Blue_Rotary-v3.c **** 	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
 199:Blue_Rotary-v3.c **** //    UCSR0C = (1<<URSE0L)|(1<<UCSZ0)|(1<<UCSZ1);	
 200:Blue_Rotary-v3.c ****     stdout = &mystdout; //Required for printf init
 201:Blue_Rotary-v3.c **** 	cli();
 202:Blue_Rotary-v3.c ****     
 203:Blue_Rotary-v3.c **** 	
 204:Blue_Rotary-v3.c **** 	//Init timer for dial tone
 205:Blue_Rotary-v3.c ****     ASSR = 0;
 206:Blue_Rotary-v3.c ****     TCCR0A=(0<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 207:Blue_Rotary-v3.c **** //    TCCR0B=(1<<CS00); // this turns on the timer now!
 208:Blue_Rotary-v3.c ****     TIMSK0 = (1<<OCIE0A)|(1<<TOIE0)|(1<<OCIE0B);
 209:Blue_Rotary-v3.c **** 	OCR0A=(0x00);		//Load Compare Register with Delay
 210:Blue_Rotary-v3.c **** }
 211:Blue_Rotary-v3.c **** 
 212:Blue_Rotary-v3.c **** //Function: config_bluetooth
 213:Blue_Rotary-v3.c **** //Purpose:	Initialize Bluetooth module
 214:Blue_Rotary-v3.c **** //Inputs:	None
 215:Blue_Rotary-v3.c **** //Outputs:	None
 216:Blue_Rotary-v3.c **** //NOTE: UART must be configured to send data at 57600bps
 217:Blue_Rotary-v3.c **** void config_bluetooth(void)
 218:Blue_Rotary-v3.c **** {   
 219:Blue_Rotary-v3.c **** 	printf("SET CONTROL CONFIG 100\nAT\n");	//Enable SCO Links
 220:Blue_Rotary-v3.c ****     _delay_ms(100);
 221:Blue_Rotary-v3.c **** 	printf("SET PROFILE HFP ON\nAT\n");		//Put iWRAP into HFP mode
 222:Blue_Rotary-v3.c ****     _delay_ms(100);
 223:Blue_Rotary-v3.c **** 	printf("SET BT AUTH * 1234\nAT\n");		//Set the password
 224:Blue_Rotary-v3.c ****     _delay_ms(100);
 225:Blue_Rotary-v3.c **** 	printf("SET BT CLASS 200404\nAT\n");	//Set device class
 226:Blue_Rotary-v3.c ****     _delay_ms(100);
 227:Blue_Rotary-v3.c **** 	printf("SET BT NAME SPARKY\nAT\n");		//Set the bluetooth name
 228:Blue_Rotary-v3.c ****     _delay_ms(100);
 229:Blue_Rotary-v3.c **** 	printf("RESET\n");
 230:Blue_Rotary-v3.c **** 	//WT32 should now be configured and ready to accept connection from other Bluetooth devices
 231:Blue_Rotary-v3.c **** 	//Just need to wait for a RING event to connect and establish and SCO connection.
 232:Blue_Rotary-v3.c **** }
 233:Blue_Rotary-v3.c **** 
 234:Blue_Rotary-v3.c **** static int uart_putchar(char c, FILE *stream)
 235:Blue_Rotary-v3.c **** {
  17               		.loc 1 235 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 1 */
  27               	.L__stack_usage = 1
  28 0002 C82F      		mov r28,r24
 236:Blue_Rotary-v3.c ****   if (c == '\n')
  29               		.loc 1 236 0
  30 0004 8A30      		cpi r24,lo8(10)
  31 0006 01F0      		breq .L7
  32               	.LVL1:
  33               	.L4:
 237:Blue_Rotary-v3.c ****     uart_putchar('\r', stream);
 238:Blue_Rotary-v3.c ****   
 239:Blue_Rotary-v3.c ****   loop_until_bit_is_set(UCSR0A, UDRE0);
  34               		.loc 1 239 0 discriminator 1
  35 0008 8091 C000 		lds r24,192
  36 000c 85FF      		sbrs r24,5
  37 000e 00C0      		rjmp .L4
 240:Blue_Rotary-v3.c ****   UDR0 = c;
  38               		.loc 1 240 0
  39 0010 C093 C600 		sts 198,r28
 241:Blue_Rotary-v3.c ****   return 0;
 242:Blue_Rotary-v3.c **** }
  40               		.loc 1 242 0
  41 0014 80E0      		ldi r24,lo8(0)
  42 0016 90E0      		ldi r25,hi8(0)
  43               	/* epilogue start */
  44 0018 CF91      		pop r28
  45               	.LVL2:
  46 001a 0895      		ret
  47               	.LVL3:
  48               	.L7:
 237:Blue_Rotary-v3.c ****     uart_putchar('\r', stream);
  49               		.loc 1 237 0
  50 001c 8DE0      		ldi r24,lo8(13)
  51               	.LVL4:
  52 001e 0E94 0000 		call uart_putchar
  53               	.LVL5:
  54 0022 00C0      		rjmp .L4
  55               		.cfi_endproc
  56               	.LFE15:
  58               	.global	__vector_18
  60               	__vector_18:
  61               	.LFB8:
  26:Blue_Rotary-v3.c **** {
  62               		.loc 1 26 0
  63               		.cfi_startproc
  64 0024 1F92      		push r1
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 3
  67               		.cfi_offset 1, -2
  68 0026 0F92      		push r0
  69               	.LCFI2:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 0, -3
  72 0028 0FB6      		in r0,__SREG__
  73 002a 0F92      		push r0
  74 002c 1124      		clr __zero_reg__
  75 002e 8F93      		push r24
  76               	.LCFI3:
  77               		.cfi_def_cfa_offset 5
  78               		.cfi_offset 24, -4
  79 0030 9F93      		push r25
  80               	.LCFI4:
  81               		.cfi_def_cfa_offset 6
  82               		.cfi_offset 25, -5
  83 0032 EF93      		push r30
  84               	.LCFI5:
  85               		.cfi_def_cfa_offset 7
  86               		.cfi_offset 30, -6
  87 0034 FF93      		push r31
  88               	.LCFI6:
  89               		.cfi_def_cfa_offset 8
  90               		.cfi_offset 31, -7
  91               	/* prologue: Signal */
  92               	/* frame size = 0 */
  93               	/* stack size = 7 */
  94               	.L__stack_usage = 7
  95               	.LVL6:
  28:Blue_Rotary-v3.c **** 	cli();		//Disable Interrupts
  96               		.loc 1 28 0
  97               	/* #APP */
  98               	 ;  28 "Blue_Rotary-v3.c" 1
  99 0036 F894      		cli
 100               	 ;  0 "" 2
  30:Blue_Rotary-v3.c **** 	character=UDR0;	//Copy the character in the UART
 101               		.loc 1 30 0
 102               	/* #NOAPP */
 103 0038 8091 C600 		lds r24,198
 104               	.LVL7:
  32:Blue_Rotary-v3.c **** 	if(isascii(character) || character==':' || character=='\n')message[message_index]=character;
 105               		.loc 1 32 0
 106 003c 87FF      		sbrs r24,7
 107 003e 00C0      		rjmp .L9
  32:Blue_Rotary-v3.c **** 	if(isascii(character) || character==':' || character=='\n')message[message_index]=character;
 108               		.loc 1 32 0 is_stmt 0 discriminator 2
 109 0040 8A33      		cpi r24,lo8(58)
 110 0042 01F0      		breq .L9
  32:Blue_Rotary-v3.c **** 	if(isascii(character) || character==':' || character=='\n')message[message_index]=character;
 111               		.loc 1 32 0 discriminator 1
 112 0044 8A30      		cpi r24,lo8(10)
 113 0046 01F4      		brne .L10
 114               	.L9:
 115 0048 E091 0000 		lds r30,message_index
 116 004c F091 0000 		lds r31,message_index+1
 117 0050 E050      		subi r30,lo8(-(message))
 118 0052 F040      		sbci r31,hi8(-(message))
 119 0054 8083      		st Z,r24
 120               	.L10:
  34:Blue_Rotary-v3.c **** 	if(message[message_index]=='\n' || message[message_index]=='\r'){
 121               		.loc 1 34 0 is_stmt 1
 122 0056 E091 0000 		lds r30,message_index
 123 005a F091 0000 		lds r31,message_index+1
 124 005e E050      		subi r30,lo8(-(message))
 125 0060 F040      		sbci r31,hi8(-(message))
 126 0062 8081      		ld r24,Z
 127               	.LVL8:
 128 0064 8A30      		cpi r24,lo8(10)
 129 0066 01F0      		breq .L11
  34:Blue_Rotary-v3.c **** 	if(message[message_index]=='\n' || message[message_index]=='\r'){
 130               		.loc 1 34 0 is_stmt 0 discriminator 1
 131 0068 E091 0000 		lds r30,message_index
 132 006c F091 0000 		lds r31,message_index+1
 133 0070 E050      		subi r30,lo8(-(message))
 134 0072 F040      		sbci r31,hi8(-(message))
 135 0074 8081      		ld r24,Z
 136 0076 8D30      		cpi r24,lo8(13)
 137 0078 01F0      		breq .L11
  38:Blue_Rotary-v3.c **** 		message_index++;
 138               		.loc 1 38 0 is_stmt 1
 139 007a 8091 0000 		lds r24,message_index
 140 007e 9091 0000 		lds r25,message_index+1
 141 0082 0196      		adiw r24,1
 142 0084 9093 0000 		sts message_index+1,r25
 143 0088 8093 0000 		sts message_index,r24
 144               	.L13:
  40:Blue_Rotary-v3.c **** 	sei();	//Enable Interrupts
 145               		.loc 1 40 0
 146               	/* #APP */
 147               	 ;  40 "Blue_Rotary-v3.c" 1
 148 008c 7894      		sei
 149               	 ;  0 "" 2
 150               	/* epilogue start */
  41:Blue_Rotary-v3.c **** }
 151               		.loc 1 41 0
 152               	/* #NOAPP */
 153 008e FF91      		pop r31
 154 0090 EF91      		pop r30
 155 0092 9F91      		pop r25
 156 0094 8F91      		pop r24
 157 0096 0F90      		pop r0
 158 0098 0FBE      		out __SREG__,r0
 159 009a 0F90      		pop r0
 160 009c 1F90      		pop r1
 161 009e 1895      		reti
 162               	.L11:
  35:Blue_Rotary-v3.c **** 		message_complete=1;
 163               		.loc 1 35 0
 164 00a0 81E0      		ldi r24,lo8(1)
 165 00a2 8093 0000 		sts message_complete,r24
 166 00a6 00C0      		rjmp .L13
 167               		.cfi_endproc
 168               	.LFE8:
 170               	.global	__vector_16
 172               	__vector_16:
 173               	.LFB9:
  45:Blue_Rotary-v3.c **** {
 174               		.loc 1 45 0
 175               		.cfi_startproc
 176 00a8 1F92      		push r1
 177               	.LCFI7:
 178               		.cfi_def_cfa_offset 3
 179               		.cfi_offset 1, -2
 180 00aa 0F92      		push r0
 181               	.LCFI8:
 182               		.cfi_def_cfa_offset 4
 183               		.cfi_offset 0, -3
 184 00ac 0FB6      		in r0,__SREG__
 185 00ae 0F92      		push r0
 186 00b0 1124      		clr __zero_reg__
 187               	/* prologue: Signal */
 188               	/* frame size = 0 */
 189               	/* stack size = 3 */
 190               	.L__stack_usage = 3
  46:Blue_Rotary-v3.c **** 	cli();
 191               		.loc 1 46 0
 192               	/* #APP */
 193               	 ;  46 "Blue_Rotary-v3.c" 1
 194 00b2 F894      		cli
 195               	 ;  0 "" 2
  47:Blue_Rotary-v3.c ****     sbi(PORTD,DT1);
 196               		.loc 1 47 0
 197               	/* #NOAPP */
 198 00b4 5E9A      		sbi 43-32,6
  48:Blue_Rotary-v3.c ****     sbi(PORTD,DT2);
 199               		.loc 1 48 0
 200 00b6 5F9A      		sbi 43-32,7
  49:Blue_Rotary-v3.c **** 	sei();
 201               		.loc 1 49 0
 202               	/* #APP */
 203               	 ;  49 "Blue_Rotary-v3.c" 1
 204 00b8 7894      		sei
 205               	 ;  0 "" 2
 206               	/* epilogue start */
  50:Blue_Rotary-v3.c **** }
 207               		.loc 1 50 0
 208               	/* #NOAPP */
 209 00ba 0F90      		pop r0
 210 00bc 0FBE      		out __SREG__,r0
 211 00be 0F90      		pop r0
 212 00c0 1F90      		pop r1
 213 00c2 1895      		reti
 214               		.cfi_endproc
 215               	.LFE9:
 217               	.global	__vector_14
 219               	__vector_14:
 220               	.LFB10:
  53:Blue_Rotary-v3.c **** {
 221               		.loc 1 53 0
 222               		.cfi_startproc
 223 00c4 1F92      		push r1
 224               	.LCFI9:
 225               		.cfi_def_cfa_offset 3
 226               		.cfi_offset 1, -2
 227 00c6 0F92      		push r0
 228               	.LCFI10:
 229               		.cfi_def_cfa_offset 4
 230               		.cfi_offset 0, -3
 231 00c8 0FB6      		in r0,__SREG__
 232 00ca 0F92      		push r0
 233 00cc 1124      		clr __zero_reg__
 234 00ce 2F93      		push r18
 235               	.LCFI11:
 236               		.cfi_def_cfa_offset 5
 237               		.cfi_offset 18, -4
 238 00d0 3F93      		push r19
 239               	.LCFI12:
 240               		.cfi_def_cfa_offset 6
 241               		.cfi_offset 19, -5
 242 00d2 4F93      		push r20
 243               	.LCFI13:
 244               		.cfi_def_cfa_offset 7
 245               		.cfi_offset 20, -6
 246 00d4 8F93      		push r24
 247               	.LCFI14:
 248               		.cfi_def_cfa_offset 8
 249               		.cfi_offset 24, -7
 250 00d6 9F93      		push r25
 251               	.LCFI15:
 252               		.cfi_def_cfa_offset 9
 253               		.cfi_offset 25, -8
 254 00d8 EF93      		push r30
 255               	.LCFI16:
 256               		.cfi_def_cfa_offset 10
 257               		.cfi_offset 30, -9
 258 00da FF93      		push r31
 259               	.LCFI17:
 260               		.cfi_def_cfa_offset 11
 261               		.cfi_offset 31, -10
 262               	/* prologue: Signal */
 263               	/* frame size = 0 */
 264               	/* stack size = 10 */
 265               	.L__stack_usage = 10
  54:Blue_Rotary-v3.c ****     cli();
 266               		.loc 1 54 0
 267               	/* #APP */
 268               	 ;  54 "Blue_Rotary-v3.c" 1
 269 00dc F894      		cli
 270               	 ;  0 "" 2
  55:Blue_Rotary-v3.c ****     cbi(PORTD,DT1);
 271               		.loc 1 55 0
 272               	/* #NOAPP */
 273 00de 5E98      		cbi 43-32,6
 274               	.LVL9:
 275               	.LBB68:
  56:Blue_Rotary-v3.c ****     OCR0A = pgm_read_byte(&(sine_table[(location_350 >> STEP_SHIFT)]));
 276               		.loc 1 56 0
 277 00e0 8091 0000 		lds r24,location_350
 278 00e4 9091 0000 		lds r25,location_350+1
 279 00e8 FC01      		movw r30,r24
 280 00ea 0024      		clr __tmp_reg__
 281 00ec EE0F      		lsl r30
 282 00ee FF1F      		rol r31
 283 00f0 001C      		rol __tmp_reg__
 284 00f2 EE0F      		lsl r30
 285 00f4 FF1F      		rol r31
 286 00f6 001C      		rol __tmp_reg__
 287 00f8 EF2F      		mov r30,r31
 288 00fa F02D      		mov r31,__tmp_reg__
 289 00fc E050      		subi r30,lo8(-(sine_table))
 290 00fe F040      		sbci r31,hi8(-(sine_table))
 291               	/* #APP */
 292               	 ;  56 "Blue_Rotary-v3.c" 1
 293 0100 E491      		lpm r30, Z
 294               		
 295               	 ;  0 "" 2
 296               	.LVL10:
 297               	/* #NOAPP */
 298               	.LBE68:
 299 0102 E7BD      		out 71-32,r30
  57:Blue_Rotary-v3.c ****     location_350 += STEP_350;
 300               		.loc 1 57 0
 301 0104 9C01      		movw r18,r24
 302 0106 2259      		subi r18,lo8(-(366))
 303 0108 3E4F      		sbci r19,hi8(-(366))
 304 010a 3093 0000 		sts location_350+1,r19
 305 010e 2093 0000 		sts location_350,r18
  58:Blue_Rotary-v3.c ****     if(location_350 >= (SINE_SAMPLES << STEP_SHIFT)) location_350 -= (SINE_SAMPLES << STEP_SHIFT);
 306               		.loc 1 58 0
 307 0112 4FE7      		ldi r20,hi8(32704)
 308 0114 203C      		cpi r18,lo8(32704)
 309 0116 3407      		cpc r19,r20
 310 0118 00F0      		brlo .L16
  58:Blue_Rotary-v3.c ****     if(location_350 >= (SINE_SAMPLES << STEP_SHIFT)) location_350 -= (SINE_SAMPLES << STEP_SHIFT);
 311               		.loc 1 58 0 is_stmt 0 discriminator 1
 312 011a 8255      		subi r24,lo8(-(-32338))
 313 011c 9E47      		sbci r25,hi8(-(-32338))
 314 011e 9093 0000 		sts location_350+1,r25
 315 0122 8093 0000 		sts location_350,r24
 316               	.L16:
  59:Blue_Rotary-v3.c ****     sei();
 317               		.loc 1 59 0 is_stmt 1
 318               	/* #APP */
 319               	 ;  59 "Blue_Rotary-v3.c" 1
 320 0126 7894      		sei
 321               	 ;  0 "" 2
 322               	/* epilogue start */
  60:Blue_Rotary-v3.c **** }
 323               		.loc 1 60 0
 324               	/* #NOAPP */
 325 0128 FF91      		pop r31
 326 012a EF91      		pop r30
 327               	.LVL11:
 328 012c 9F91      		pop r25
 329 012e 8F91      		pop r24
 330 0130 4F91      		pop r20
 331 0132 3F91      		pop r19
 332 0134 2F91      		pop r18
 333 0136 0F90      		pop r0
 334 0138 0FBE      		out __SREG__,r0
 335 013a 0F90      		pop r0
 336 013c 1F90      		pop r1
 337 013e 1895      		reti
 338               		.cfi_endproc
 339               	.LFE10:
 341               	.global	__vector_15
 343               	__vector_15:
 344               	.LFB11:
  63:Blue_Rotary-v3.c **** {
 345               		.loc 1 63 0
 346               		.cfi_startproc
 347 0140 1F92      		push r1
 348               	.LCFI18:
 349               		.cfi_def_cfa_offset 3
 350               		.cfi_offset 1, -2
 351 0142 0F92      		push r0
 352               	.LCFI19:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 0, -3
 355 0144 0FB6      		in r0,__SREG__
 356 0146 0F92      		push r0
 357 0148 1124      		clr __zero_reg__
 358 014a 2F93      		push r18
 359               	.LCFI20:
 360               		.cfi_def_cfa_offset 5
 361               		.cfi_offset 18, -4
 362 014c 3F93      		push r19
 363               	.LCFI21:
 364               		.cfi_def_cfa_offset 6
 365               		.cfi_offset 19, -5
 366 014e 4F93      		push r20
 367               	.LCFI22:
 368               		.cfi_def_cfa_offset 7
 369               		.cfi_offset 20, -6
 370 0150 8F93      		push r24
 371               	.LCFI23:
 372               		.cfi_def_cfa_offset 8
 373               		.cfi_offset 24, -7
 374 0152 9F93      		push r25
 375               	.LCFI24:
 376               		.cfi_def_cfa_offset 9
 377               		.cfi_offset 25, -8
 378 0154 EF93      		push r30
 379               	.LCFI25:
 380               		.cfi_def_cfa_offset 10
 381               		.cfi_offset 30, -9
 382 0156 FF93      		push r31
 383               	.LCFI26:
 384               		.cfi_def_cfa_offset 11
 385               		.cfi_offset 31, -10
 386               	/* prologue: Signal */
 387               	/* frame size = 0 */
 388               	/* stack size = 10 */
 389               	.L__stack_usage = 10
  64:Blue_Rotary-v3.c ****     cli();
 390               		.loc 1 64 0
 391               	/* #APP */
 392               	 ;  64 "Blue_Rotary-v3.c" 1
 393 0158 F894      		cli
 394               	 ;  0 "" 2
  65:Blue_Rotary-v3.c ****     cbi(PORTD,DT2);
 395               		.loc 1 65 0
 396               	/* #NOAPP */
 397 015a 5F98      		cbi 43-32,7
 398               	.LVL12:
 399               	.LBB69:
  66:Blue_Rotary-v3.c ****     OCR0B = pgm_read_byte(&(sine_table[(location_440 >> STEP_SHIFT)]));
 400               		.loc 1 66 0
 401 015c 8091 0000 		lds r24,location_440
 402 0160 9091 0000 		lds r25,location_440+1
 403 0164 FC01      		movw r30,r24
 404 0166 0024      		clr __tmp_reg__
 405 0168 EE0F      		lsl r30
 406 016a FF1F      		rol r31
 407 016c 001C      		rol __tmp_reg__
 408 016e EE0F      		lsl r30
 409 0170 FF1F      		rol r31
 410 0172 001C      		rol __tmp_reg__
 411 0174 EF2F      		mov r30,r31
 412 0176 F02D      		mov r31,__tmp_reg__
 413 0178 E050      		subi r30,lo8(-(sine_table))
 414 017a F040      		sbci r31,hi8(-(sine_table))
 415               	/* #APP */
 416               	 ;  66 "Blue_Rotary-v3.c" 1
 417 017c E491      		lpm r30, Z
 418               		
 419               	 ;  0 "" 2
 420               	.LVL13:
 421               	/* #NOAPP */
 422               	.LBE69:
 423 017e E8BD      		out 72-32,r30
  67:Blue_Rotary-v3.c ****     location_440 += STEP_440;
 424               		.loc 1 67 0
 425 0180 9C01      		movw r18,r24
 426 0182 2453      		subi r18,lo8(-(460))
 427 0184 3E4F      		sbci r19,hi8(-(460))
 428 0186 3093 0000 		sts location_440+1,r19
 429 018a 2093 0000 		sts location_440,r18
  68:Blue_Rotary-v3.c ****     if(location_440 >= (SINE_SAMPLES << STEP_SHIFT)) location_440 -= (SINE_SAMPLES << STEP_SHIFT);
 430               		.loc 1 68 0
 431 018e 4FE7      		ldi r20,hi8(32704)
 432 0190 203C      		cpi r18,lo8(32704)
 433 0192 3407      		cpc r19,r20
 434 0194 00F0      		brlo .L18
  68:Blue_Rotary-v3.c ****     if(location_440 >= (SINE_SAMPLES << STEP_SHIFT)) location_440 -= (SINE_SAMPLES << STEP_SHIFT);
 435               		.loc 1 68 0 is_stmt 0 discriminator 1
 436 0196 845F      		subi r24,lo8(-(-32244))
 437 0198 9D47      		sbci r25,hi8(-(-32244))
 438 019a 9093 0000 		sts location_440+1,r25
 439 019e 8093 0000 		sts location_440,r24
 440               	.L18:
  69:Blue_Rotary-v3.c ****     sei();
 441               		.loc 1 69 0 is_stmt 1
 442               	/* #APP */
 443               	 ;  69 "Blue_Rotary-v3.c" 1
 444 01a2 7894      		sei
 445               	 ;  0 "" 2
 446               	/* epilogue start */
  70:Blue_Rotary-v3.c **** }
 447               		.loc 1 70 0
 448               	/* #NOAPP */
 449 01a4 FF91      		pop r31
 450 01a6 EF91      		pop r30
 451               	.LVL14:
 452 01a8 9F91      		pop r25
 453 01aa 8F91      		pop r24
 454 01ac 4F91      		pop r20
 455 01ae 3F91      		pop r19
 456 01b0 2F91      		pop r18
 457 01b2 0F90      		pop r0
 458 01b4 0FBE      		out __SREG__,r0
 459 01b6 0F90      		pop r0
 460 01b8 1F90      		pop r1
 461 01ba 1895      		reti
 462               		.cfi_endproc
 463               	.LFE11:
 465               	.global	ioinit
 467               	ioinit:
 468               	.LFB13:
 177:Blue_Rotary-v3.c **** {
 469               		.loc 1 177 0
 470               		.cfi_startproc
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 179:Blue_Rotary-v3.c **** 	DDRB = (1<<CS) | (1<<SCK) | (1<<MOSI);										//Define Port B GPIO Outputs
 475               		.loc 1 179 0
 476 01bc 8CE2      		ldi r24,lo8(44)
 477 01be 84B9      		out 36-32,r24
 180:Blue_Rotary-v3.c ****     PORTB = (1<<MISO);
 478               		.loc 1 180 0
 479 01c0 90E1      		ldi r25,lo8(16)
 480 01c2 95B9      		out 37-32,r25
 181:Blue_Rotary-v3.c **** 	DDRB &= ~(1<<MISO);
 481               		.loc 1 181 0
 482 01c4 2498      		cbi 36-32,4
 183:Blue_Rotary-v3.c **** 	DDRC = (1<<BT_EN) | (1<<RING_PWR) | (1<<RING1) | (1<<RING2) |  (1<<PSTAT); 	//Define Port C Output
 483               		.loc 1 183 0
 484 01c6 8EE3      		ldi r24,lo8(62)
 485 01c8 87B9      		out 39-32,r24
 184:Blue_Rotary-v3.c **** 	PORTC = (1<<HOOK);
 486               		.loc 1 184 0
 487 01ca 81E0      		ldi r24,lo8(1)
 488 01cc 88B9      		out 40-32,r24
 185:Blue_Rotary-v3.c **** 	DDRC &= ~(1<<HOOK);															//Define Port C Inputs
 489               		.loc 1 185 0
 490 01ce 3898      		cbi 39-32,0
 187:Blue_Rotary-v3.c **** 	DDRD = (1<<DT1) | (1<<DT2) | (1<< BT_RES);										//Define Port D Outputs
 491               		.loc 1 187 0
 492 01d0 84EC      		ldi r24,lo8(-60)
 493 01d2 8AB9      		out 42-32,r24
 188:Blue_Rotary-v3.c **** 	PORTD = (1<<ROTARY) | (1<<EROTARY);	
 494               		.loc 1 188 0
 495 01d4 88E1      		ldi r24,lo8(24)
 496 01d6 8BB9      		out 43-32,r24
 189:Blue_Rotary-v3.c ****     DDRD &= ~((1<<ROTARY)|(1<<EROTARY));								//Define Port D inputs
 497               		.loc 1 189 0
 498 01d8 8AB1      		in r24,42-32
 499 01da 877E      		andi r24,lo8(-25)
 500 01dc 8AB9      		out 42-32,r24
 195:Blue_Rotary-v3.c ****     UBRR0H = (MYUBRR >> 8) & 0x7F;	//Make sure highest bit(URSEL) is 0 indicating we are writing to
 501               		.loc 1 195 0
 502 01de 1092 C500 		sts 197,__zero_reg__
 196:Blue_Rotary-v3.c **** 	UBRR0L = MYUBRR;
 503               		.loc 1 196 0
 504 01e2 9093 C400 		sts 196,r25
 197:Blue_Rotary-v3.c ****     UCSR0A = (1<<U2X0);	
 505               		.loc 1 197 0
 506 01e6 82E0      		ldi r24,lo8(2)
 507 01e8 8093 C000 		sts 192,r24
 198:Blue_Rotary-v3.c **** 	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
 508               		.loc 1 198 0
 509 01ec 88E9      		ldi r24,lo8(-104)
 510 01ee 8093 C100 		sts 193,r24
 200:Blue_Rotary-v3.c ****     stdout = &mystdout; //Required for printf init
 511               		.loc 1 200 0
 512 01f2 80E0      		ldi r24,lo8(mystdout)
 513 01f4 90E0      		ldi r25,hi8(mystdout)
 514 01f6 9093 0000 		sts __iob+2+1,r25
 515 01fa 8093 0000 		sts __iob+2,r24
 201:Blue_Rotary-v3.c **** 	cli();
 516               		.loc 1 201 0
 517               	/* #APP */
 518               	 ;  201 "Blue_Rotary-v3.c" 1
 519 01fe F894      		cli
 520               	 ;  0 "" 2
 205:Blue_Rotary-v3.c ****     ASSR = 0;
 521               		.loc 1 205 0
 522               	/* #NOAPP */
 523 0200 1092 B600 		sts 182,__zero_reg__
 206:Blue_Rotary-v3.c ****     TCCR0A=(0<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 524               		.loc 1 206 0
 525 0204 83E0      		ldi r24,lo8(3)
 526 0206 84BD      		out 68-32,r24
 208:Blue_Rotary-v3.c ****     TIMSK0 = (1<<OCIE0A)|(1<<TOIE0)|(1<<OCIE0B);
 527               		.loc 1 208 0
 528 0208 87E0      		ldi r24,lo8(7)
 529 020a 8093 6E00 		sts 110,r24
 209:Blue_Rotary-v3.c **** 	OCR0A=(0x00);		//Load Compare Register with Delay
 530               		.loc 1 209 0
 531 020e 17BC      		out 71-32,__zero_reg__
 532               	/* epilogue start */
 210:Blue_Rotary-v3.c **** }
 533               		.loc 1 210 0
 534 0210 0895      		ret
 535               		.cfi_endproc
 536               	.LFE13:
 538               		.data
 539               	.LC0:
 540 0000 5345 5420 		.string	"SET CONTROL CONFIG 100\nAT"
 540      434F 4E54 
 540      524F 4C20 
 540      434F 4E46 
 540      4947 2031 
 541               	.LC1:
 542 001a 5345 5420 		.string	"SET PROFILE HFP ON\nAT"
 542      5052 4F46 
 542      494C 4520 
 542      4846 5020 
 542      4F4E 0A41 
 543               	.LC2:
 544 0030 5345 5420 		.string	"SET BT AUTH * 1234\nAT"
 544      4254 2041 
 544      5554 4820 
 544      2A20 3132 
 544      3334 0A41 
 545               	.LC3:
 546 0046 5345 5420 		.string	"SET BT CLASS 200404\nAT"
 546      4254 2043 
 546      4C41 5353 
 546      2032 3030 
 546      3430 340A 
 547               	.LC4:
 548 005d 5345 5420 		.string	"SET BT NAME SPARKY\nAT"
 548      4254 204E 
 548      414D 4520 
 548      5350 4152 
 548      4B59 0A41 
 549               	.LC5:
 550 0073 5245 5345 		.string	"RESET"
 550      5400 
 551               		.text
 552               	.global	config_bluetooth
 554               	config_bluetooth:
 555               	.LFB14:
 218:Blue_Rotary-v3.c **** {   
 556               		.loc 1 218 0
 557               		.cfi_startproc
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560               	/* stack size = 0 */
 561               	.L__stack_usage = 0
 219:Blue_Rotary-v3.c **** 	printf("SET CONTROL CONFIG 100\nAT\n");	//Enable SCO Links
 562               		.loc 1 219 0
 563 0212 80E0      		ldi r24,lo8(.LC0)
 564 0214 90E0      		ldi r25,hi8(.LC0)
 565 0216 0E94 0000 		call puts
 566               	.LVL15:
 567               	.LBB70:
 568               	.LBB71:
 569               		.file 2 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 153:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 156:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 159:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 164:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 570               		.loc 2 164 0
 571 021a 8FEF      		 ldi r24,lo8(159999)
 572 021c 90E7      	    ldi r25,hi8(159999)
 573 021e A2E0      	    ldi r26,hlo8(159999)
 574 0220 8150      	    1:subi r24,1
 575 0222 9040      	    sbci r25,0
 576 0224 A040      	    sbci r26,0
 577 0226 01F4      	    brne 1b
 578 0228 00C0      		rjmp .
 579 022a 0000      		nop
 580               	.LBE71:
 581               	.LBE70:
 221:Blue_Rotary-v3.c **** 	printf("SET PROFILE HFP ON\nAT\n");		//Put iWRAP into HFP mode
 582               		.loc 1 221 0
 583 022c 80E0      		ldi r24,lo8(.LC1)
 584 022e 90E0      		ldi r25,hi8(.LC1)
 585 0230 0E94 0000 		call puts
 586               	.LVL16:
 587               	.LBB72:
 588               	.LBB73:
 589               		.loc 2 164 0
 590 0234 8FEF      		 ldi r24,lo8(159999)
 591 0236 90E7      	    ldi r25,hi8(159999)
 592 0238 A2E0      	    ldi r26,hlo8(159999)
 593 023a 8150      	    1:subi r24,1
 594 023c 9040      	    sbci r25,0
 595 023e A040      	    sbci r26,0
 596 0240 01F4      	    brne 1b
 597 0242 00C0      		rjmp .
 598 0244 0000      		nop
 599               	.LBE73:
 600               	.LBE72:
 223:Blue_Rotary-v3.c **** 	printf("SET BT AUTH * 1234\nAT\n");		//Set the password
 601               		.loc 1 223 0
 602 0246 80E0      		ldi r24,lo8(.LC2)
 603 0248 90E0      		ldi r25,hi8(.LC2)
 604 024a 0E94 0000 		call puts
 605               	.LVL17:
 606               	.LBB74:
 607               	.LBB75:
 608               		.loc 2 164 0
 609 024e 8FEF      		 ldi r24,lo8(159999)
 610 0250 90E7      	    ldi r25,hi8(159999)
 611 0252 A2E0      	    ldi r26,hlo8(159999)
 612 0254 8150      	    1:subi r24,1
 613 0256 9040      	    sbci r25,0
 614 0258 A040      	    sbci r26,0
 615 025a 01F4      	    brne 1b
 616 025c 00C0      		rjmp .
 617 025e 0000      		nop
 618               	.LBE75:
 619               	.LBE74:
 225:Blue_Rotary-v3.c **** 	printf("SET BT CLASS 200404\nAT\n");	//Set device class
 620               		.loc 1 225 0
 621 0260 80E0      		ldi r24,lo8(.LC3)
 622 0262 90E0      		ldi r25,hi8(.LC3)
 623 0264 0E94 0000 		call puts
 624               	.LVL18:
 625               	.LBB76:
 626               	.LBB77:
 627               		.loc 2 164 0
 628 0268 8FEF      		 ldi r24,lo8(159999)
 629 026a 90E7      	    ldi r25,hi8(159999)
 630 026c A2E0      	    ldi r26,hlo8(159999)
 631 026e 8150      	    1:subi r24,1
 632 0270 9040      	    sbci r25,0
 633 0272 A040      	    sbci r26,0
 634 0274 01F4      	    brne 1b
 635 0276 00C0      		rjmp .
 636 0278 0000      		nop
 637               	.LBE77:
 638               	.LBE76:
 227:Blue_Rotary-v3.c **** 	printf("SET BT NAME SPARKY\nAT\n");		//Set the bluetooth name
 639               		.loc 1 227 0
 640 027a 80E0      		ldi r24,lo8(.LC4)
 641 027c 90E0      		ldi r25,hi8(.LC4)
 642 027e 0E94 0000 		call puts
 643               	.LVL19:
 644               	.LBB78:
 645               	.LBB79:
 646               		.loc 2 164 0
 647 0282 8FEF      		 ldi r24,lo8(159999)
 648 0284 90E7      	    ldi r25,hi8(159999)
 649 0286 A2E0      	    ldi r26,hlo8(159999)
 650 0288 8150      	    1:subi r24,1
 651 028a 9040      	    sbci r25,0
 652 028c A040      	    sbci r26,0
 653 028e 01F4      	    brne 1b
 654 0290 00C0      		rjmp .
 655 0292 0000      		nop
 656               	.LBE79:
 657               	.LBE78:
 229:Blue_Rotary-v3.c **** 	printf("RESET\n");
 658               		.loc 1 229 0
 659 0294 80E0      		ldi r24,lo8(.LC5)
 660 0296 90E0      		ldi r25,hi8(.LC5)
 661 0298 0E94 0000 		call puts
 662               	/* epilogue start */
 232:Blue_Rotary-v3.c **** }
 663               		.loc 1 232 0
 664 029c 0895      		ret
 665               		.cfi_endproc
 666               	.LFE14:
 668               	.global	uart_getchar
 670               	uart_getchar:
 671               	.LFB16:
 243:Blue_Rotary-v3.c **** 
 244:Blue_Rotary-v3.c **** uint8_t uart_getchar(void)
 245:Blue_Rotary-v3.c **** {
 672               		.loc 1 245 0
 673               		.cfi_startproc
 674               	/* prologue: function */
 675               	/* frame size = 0 */
 676               	/* stack size = 0 */
 677               	.L__stack_usage = 0
 678               	.L22:
 246:Blue_Rotary-v3.c ****     while( !(UCSR0A & (1<<RXC0)) );
 679               		.loc 1 246 0 discriminator 1
 680 029e 8091 C000 		lds r24,192
 681 02a2 87FF      		sbrs r24,7
 682 02a4 00C0      		rjmp .L22
 247:Blue_Rotary-v3.c **** 	return(UDR0);
 683               		.loc 1 247 0
 684 02a6 8091 C600 		lds r24,198
 685               	/* epilogue start */
 248:Blue_Rotary-v3.c **** }
 686               		.loc 1 248 0
 687 02aa 0895      		ret
 688               		.cfi_endproc
 689               	.LFE16:
 691               	.global	delay_ms
 693               	delay_ms:
 694               	.LFB17:
 249:Blue_Rotary-v3.c **** 
 250:Blue_Rotary-v3.c **** //Function:	delay_ms
 251:Blue_Rotary-v3.c **** //Purpose:	General delay. Lasts ~1ms
 252:Blue_Rotary-v3.c **** //Inputs:	int x - Time to delay
 253:Blue_Rotary-v3.c **** //Outputs:	None
 254:Blue_Rotary-v3.c **** void delay_ms(uint16_t x)
 255:Blue_Rotary-v3.c **** {
 695               		.loc 1 255 0
 696               		.cfi_startproc
 697               	.LVL20:
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 0 */
 701               	.L__stack_usage = 0
 256:Blue_Rotary-v3.c ****   uint8_t y, z;
 257:Blue_Rotary-v3.c ****   for ( ; x > 0 ; x--){
 702               		.loc 1 257 0
 703 02ac 0097      		sbiw r24,0
 704 02ae 01F0      		breq .L34
 705               	.L31:
 706               	.LVL21:
 255:Blue_Rotary-v3.c **** {
 707               		.loc 1 255 0
 708 02b0 38E2      		ldi r19,lo8(40)
 709               	.LVL22:
 710               	.L30:
 255:Blue_Rotary-v3.c **** {
 711               		.loc 1 255 0 is_stmt 0 discriminator 1
 712 02b2 28E2      		ldi r18,lo8(40)
 713               	.LVL23:
 714               	.L27:
 258:Blue_Rotary-v3.c ****     for ( y = 0 ; y < 40 ; y++){
 259:Blue_Rotary-v3.c ****       for ( z = 0 ; z < 40 ; z++){
 260:Blue_Rotary-v3.c ****         asm volatile ("nop");
 715               		.loc 1 260 0 is_stmt 1 discriminator 2
 716               	/* #APP */
 717               	 ;  260 "Blue_Rotary-v3.c" 1
 718 02b4 0000      		nop
 719               	 ;  0 "" 2
 720               	/* #NOAPP */
 721 02b6 2150      		subi r18,lo8(-(-1))
 259:Blue_Rotary-v3.c ****       for ( z = 0 ; z < 40 ; z++){
 722               		.loc 1 259 0 discriminator 2
 723 02b8 01F4      		brne .L27
 259:Blue_Rotary-v3.c ****       for ( z = 0 ; z < 40 ; z++){
 724               		.loc 1 259 0 is_stmt 0
 725 02ba 3150      		subi r19,lo8(-(-1))
 258:Blue_Rotary-v3.c ****     for ( y = 0 ; y < 40 ; y++){
 726               		.loc 1 258 0 is_stmt 1
 727 02bc 01F4      		brne .L30
 257:Blue_Rotary-v3.c ****   for ( ; x > 0 ; x--){
 728               		.loc 1 257 0
 729 02be 0197      		sbiw r24,1
 730               	.LVL24:
 731 02c0 01F4      		brne .L31
 732 02c2 0895      		ret
 733               	.L34:
 734 02c4 0895      		ret
 735               		.cfi_endproc
 736               	.LFE17:
 738               	.global	dial_tone
 740               	dial_tone:
 741               	.LFB19:
 261:Blue_Rotary-v3.c ****       }
 262:Blue_Rotary-v3.c ****     }
 263:Blue_Rotary-v3.c ****   }
 264:Blue_Rotary-v3.c **** }
 265:Blue_Rotary-v3.c **** 
 266:Blue_Rotary-v3.c **** //Function:	incoming_call
 267:Blue_Rotary-v3.c **** //Purpose:	Rings the bell until phone is off the hook, then commands the BT module to answer the ca
 268:Blue_Rotary-v3.c **** //			When user replaces handset on hook, command is issued to end the call
 269:Blue_Rotary-v3.c **** //Inputs:	None
 270:Blue_Rotary-v3.c **** //Outputs:	None
 271:Blue_Rotary-v3.c **** void incoming_call(void)
 272:Blue_Rotary-v3.c **** {
 273:Blue_Rotary-v3.c ****     cbi(PORTC, RING_PWR);	//Power on Ringer Circuit
 274:Blue_Rotary-v3.c **** 
 275:Blue_Rotary-v3.c **** 	ring_it();
 276:Blue_Rotary-v3.c ****     for(int i = 0 ; i < 300 ; i++)
 277:Blue_Rotary-v3.c ****     {
 278:Blue_Rotary-v3.c ****         _delay_ms(10);
 279:Blue_Rotary-v3.c ****         if(PINC & (1<<HOOK)) break;	//if the phone is taken off the hook, then get out of here
 280:Blue_Rotary-v3.c ****     }	
 281:Blue_Rotary-v3.c **** 
 282:Blue_Rotary-v3.c ****     if(PINC & (1<<HOOK))	//The phone has been taken off the hooK
 283:Blue_Rotary-v3.c ****     {
 284:Blue_Rotary-v3.c **** 		_delay_ms(200);
 285:Blue_Rotary-v3.c **** 
 286:Blue_Rotary-v3.c ****         printf("ANSWER\n");				//User the iWRAP command to answer the call
 287:Blue_Rotary-v3.c ****         while(PINC & (1<<HOOK)); 		//Wait for user to hang up
 288:Blue_Rotary-v3.c ****         printf("HANGUP\n");
 289:Blue_Rotary-v3.c **** 
 290:Blue_Rotary-v3.c **** 		_delay_ms(1000);
 291:Blue_Rotary-v3.c ****     }
 292:Blue_Rotary-v3.c ****     
 293:Blue_Rotary-v3.c **** }
 294:Blue_Rotary-v3.c **** 
 295:Blue_Rotary-v3.c **** //Function:	dial_tone
 296:Blue_Rotary-v3.c **** //Purpose:	Generate a dial tone on the handset
 297:Blue_Rotary-v3.c **** //Inputs:	None
 298:Blue_Rotary-v3.c **** //Outputs:	None
 299:Blue_Rotary-v3.c **** void dial_tone(void)
 300:Blue_Rotary-v3.c **** {   // should be about 350 Hz
 742               		.loc 1 300 0
 743               		.cfi_startproc
 744               	/* prologue: function */
 745               	/* frame size = 0 */
 746               	/* stack size = 0 */
 747               	.L__stack_usage = 0
 301:Blue_Rotary-v3.c **** 	sbi(PORTD, DT1);
 748               		.loc 1 301 0
 749 02c6 5E9A      		sbi 43-32,6
 750               	.LVL25:
 751               	.LBB80:
 752               	.LBB81:
 753               		.loc 2 164 0
 754 02c8 89E2      		 ldi r24,lo8(2857)
 755 02ca 9BE0      	    ldi r25,hi8(2857)
 756 02cc 0197      	    1:sbiw r24,1
 757 02ce 01F4      	    brne 1b
 758               	.LBE81:
 759               	.LBE80:
 302:Blue_Rotary-v3.c ****     _delay_ms(50.0/35.0);    
 303:Blue_Rotary-v3.c ****     cbi(PORTD, DT1);
 760               		.loc 1 303 0
 761 02d0 5E98      		cbi 43-32,6
 762               	.LVL26:
 763               	.LBB82:
 764               	.LBB83:
 765               		.loc 2 164 0
 766 02d2 89E2      		 ldi r24,lo8(2857)
 767 02d4 9BE0      	    ldi r25,hi8(2857)
 768 02d6 0197      	    1:sbiw r24,1
 769 02d8 01F4      	    brne 1b
 770               	/* epilogue start */
 771               	.LBE83:
 772               	.LBE82:
 304:Blue_Rotary-v3.c ****     _delay_ms(50.0/35.0);
 305:Blue_Rotary-v3.c **** }
 773               		.loc 1 305 0
 774 02da 0895      		ret
 775               		.cfi_endproc
 776               	.LFE19:
 778               	.global	ring_it
 780               	ring_it:
 781               	.LFB21:
 306:Blue_Rotary-v3.c **** 
 307:Blue_Rotary-v3.c **** //Function:	place_call
 308:Blue_Rotary-v3.c **** //Purpose:	Plays dial tone until number is pressed. Records dialed numbers until a 4 second pause i
 309:Blue_Rotary-v3.c **** //Inputs:	None
 310:Blue_Rotary-v3.c **** //Outputs:	None
 311:Blue_Rotary-v3.c **** void place_call(void)
 312:Blue_Rotary-v3.c **** {
 313:Blue_Rotary-v3.c ****     LED_ON();
 314:Blue_Rotary-v3.c ****     
 315:Blue_Rotary-v3.c ****     //Play dial tone until the rotary is touched or phone is hung up
 316:Blue_Rotary-v3.c **** 	UCSR0B &= ~(1<<RXCIE0);
 317:Blue_Rotary-v3.c **** //	TIMSK1 = (1<<OCIE1B);
 318:Blue_Rotary-v3.c ****     TCCR0B |= (1<<CS00);
 319:Blue_Rotary-v3.c ****     while(PIND & (1<<EROTARY)){	//If the Rotary starts spinning, get out of the dial tone
 320:Blue_Rotary-v3.c **** //		dial_tone();
 321:Blue_Rotary-v3.c **** 		if((PINC & (1<<HOOK))!=(1<<HOOK)){	//If the phone is back on the hook, stop the dial tone and exi
 322:Blue_Rotary-v3.c **** 			UCSR0B |= (1<<RXCIE0);					//because there is no number to be dialed.
 323:Blue_Rotary-v3.c **** //			TIMSK1 &= ~(1<<OCIE0B);
 324:Blue_Rotary-v3.c ****             TCCR0B &= ~(1<<CS00);
 325:Blue_Rotary-v3.c **** 			LED_OFF();
 326:Blue_Rotary-v3.c **** 			return;
 327:Blue_Rotary-v3.c **** 			}
 328:Blue_Rotary-v3.c **** 			
 329:Blue_Rotary-v3.c **** 			//If we get a message before we start dialing, check to make sure it isn't the "disconnect" mess
 330:Blue_Rotary-v3.c **** 			if(message_complete){
 331:Blue_Rotary-v3.c **** 				cli();
 332:Blue_Rotary-v3.c **** 				message_complete=0;
 333:Blue_Rotary-v3.c **** 				message_index=0;
 334:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 335:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 336:Blue_Rotary-v3.c **** 				sei();
 337:Blue_Rotary-v3.c **** 				if(string_compare(final_message, "NO CARRIER 0")){
 338:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 339:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 340:Blue_Rotary-v3.c **** 					connected=0;
 341:Blue_Rotary-v3.c **** 					message_complete=0;
 342:Blue_Rotary-v3.c **** 					return;		//If we lose the bluetooth connection, exit the function and start looking for a new 
 343:Blue_Rotary-v3.c **** 				}
 344:Blue_Rotary-v3.c **** 			}
 345:Blue_Rotary-v3.c **** 			
 346:Blue_Rotary-v3.c **** 	}
 347:Blue_Rotary-v3.c ****     UCSR0B |= (1<<RXCIE0);
 348:Blue_Rotary-v3.c ****     TCCR0B &= ~(1<<CS00);
 349:Blue_Rotary-v3.c ****     //Begin Read Rotary
 350:Blue_Rotary-v3.c ****     number_length = 0;
 351:Blue_Rotary-v3.c ****     dialed_number = 0;
 352:Blue_Rotary-v3.c ****     counter = 0;	
 353:Blue_Rotary-v3.c **** 	get_number_timeout=0;
 354:Blue_Rotary-v3.c **** 	if(get_rotary_number()){	//If a number was dialed, then keep looking for numbers
 355:Blue_Rotary-v3.c **** 		counter++;
 356:Blue_Rotary-v3.c **** 		while(get_number_timeout < 40){	//Make sure we haven't reached the 4 second timeout
 357:Blue_Rotary-v3.c **** 			dialed_number = 0;
 358:Blue_Rotary-v3.c **** 			
 359:Blue_Rotary-v3.c **** 			//If the rotary starts moving, collect the number
 360:Blue_Rotary-v3.c **** 			if((PIND & (1<<EROTARY)) != (1<<EROTARY)){
 361:Blue_Rotary-v3.c **** 				if(get_rotary_number())counter++; //Wait for user to start dialing
 362:Blue_Rotary-v3.c **** 				get_number_timeout=0;
 363:Blue_Rotary-v3.c **** 			}	
 364:Blue_Rotary-v3.c **** 			_delay_ms(100);
 365:Blue_Rotary-v3.c **** 			get_number_timeout++;
 366:Blue_Rotary-v3.c **** 		}
 367:Blue_Rotary-v3.c **** 		//If we've reached the timeout, and we have a number to dial, then dial it!
 368:Blue_Rotary-v3.c **** 		if(counter > 0)dial_number();
 369:Blue_Rotary-v3.c **** 	}
 370:Blue_Rotary-v3.c **** 	printf("HANGUP\n");	//After dialing number, wait for the phone to go on the hook and then hang up.
 371:Blue_Rotary-v3.c ****     get_number_timeout=0;
 372:Blue_Rotary-v3.c **** 	_delay_ms(1000);		//Let the bluetooth messages stop.
 373:Blue_Rotary-v3.c **** 	LED_OFF();
 374:Blue_Rotary-v3.c **** }
 375:Blue_Rotary-v3.c **** 
 376:Blue_Rotary-v3.c **** //Toggle the ring pins at 20Hz or 50ms
 377:Blue_Rotary-v3.c **** //Function:	ring_it
 378:Blue_Rotary-v3.c **** //Purpose:	Rings the bell
 379:Blue_Rotary-v3.c **** //Inputs:	None
 380:Blue_Rotary-v3.c **** //Outputs:	None
 381:Blue_Rotary-v3.c **** void ring_it(void)
 382:Blue_Rotary-v3.c **** {
 782               		.loc 1 382 0
 783               		.cfi_startproc
 784               	/* prologue: function */
 785               	/* frame size = 0 */
 786               	/* stack size = 0 */
 787               	.L__stack_usage = 0
 383:Blue_Rotary-v3.c ****     LED_ON();
 788               		.loc 1 383 0
 789 02dc 4598      		cbi 40-32,5
 790               	.LVL27:
 791 02de 82E3      		ldi r24,lo8(50)
 792 02e0 00C0      		rjmp .L38
 793               	.LVL28:
 794               	.L40:
 795               	.LBB84:
 384:Blue_Rotary-v3.c **** 
 385:Blue_Rotary-v3.c ****     for(char i = 0 ; i < 50 ; i++)
 386:Blue_Rotary-v3.c ****     {
 387:Blue_Rotary-v3.c ****         sbi(PORTC, RING1);
 388:Blue_Rotary-v3.c **** 		cbi(PORTC, RING2);
 389:Blue_Rotary-v3.c **** 		_delay_ms(25.0);
 390:Blue_Rotary-v3.c ****     
 391:Blue_Rotary-v3.c **** 		cbi(PORTC, RING1);
 392:Blue_Rotary-v3.c ****         sbi(PORTC, RING2);
 393:Blue_Rotary-v3.c ****         _delay_ms(25.0);
 394:Blue_Rotary-v3.c **** 		if(PINC & (1<<HOOK)) break;
 796               		.loc 1 394 0
 797 02e2 8150      		subi r24,lo8(-(-1))
 385:Blue_Rotary-v3.c ****     for(char i = 0 ; i < 50 ; i++)
 798               		.loc 1 385 0
 799 02e4 01F0      		breq .L37
 800               	.LVL29:
 801               	.L38:
 387:Blue_Rotary-v3.c ****         sbi(PORTC, RING1);
 802               		.loc 1 387 0
 803 02e6 439A      		sbi 40-32,3
 388:Blue_Rotary-v3.c **** 		cbi(PORTC, RING2);
 804               		.loc 1 388 0
 805 02e8 4498      		cbi 40-32,4
 806               	.LVL30:
 807               	.LBB85:
 808               	.LBB86:
 809               		.loc 2 164 0
 810 02ea EFE4      		 ldi r30,lo8(-15537)
 811 02ec F3EC      	    ldi r31,hi8(-15537)
 812 02ee 3197      	    1:sbiw r30,1
 813 02f0 01F4      	    brne 1b
 814 02f2 00C0      		rjmp .
 815 02f4 0000      		nop
 816               	.LBE86:
 817               	.LBE85:
 391:Blue_Rotary-v3.c **** 		cbi(PORTC, RING1);
 818               		.loc 1 391 0
 819 02f6 4398      		cbi 40-32,3
 392:Blue_Rotary-v3.c ****         sbi(PORTC, RING2);
 820               		.loc 1 392 0
 821 02f8 449A      		sbi 40-32,4
 822               	.LVL31:
 823               	.LBB87:
 824               	.LBB88:
 825               		.loc 2 164 0
 826 02fa EFE4      		 ldi r30,lo8(-15537)
 827 02fc F3EC      	    ldi r31,hi8(-15537)
 828 02fe 3197      	    1:sbiw r30,1
 829 0300 01F4      	    brne 1b
 830 0302 00C0      		rjmp .
 831 0304 0000      		nop
 832               	.LBE88:
 833               	.LBE87:
 834               		.loc 1 394 0
 835 0306 309B      		sbis 38-32,0
 836 0308 00C0      		rjmp .L40
 837               	.L37:
 838               	.LBE84:
 395:Blue_Rotary-v3.c ****     } 
 396:Blue_Rotary-v3.c **** 
 397:Blue_Rotary-v3.c ****     cbi(PORTC, RING1);
 839               		.loc 1 397 0
 840 030a 4398      		cbi 40-32,3
 398:Blue_Rotary-v3.c ****     cbi(PORTC, RING2);
 841               		.loc 1 398 0
 842 030c 4498      		cbi 40-32,4
 399:Blue_Rotary-v3.c **** 
 400:Blue_Rotary-v3.c ****     LED_OFF();
 843               		.loc 1 400 0
 844 030e 459A      		sbi 40-32,5
 845               	/* epilogue start */
 401:Blue_Rotary-v3.c **** }
 846               		.loc 1 401 0
 847 0310 0895      		ret
 848               		.cfi_endproc
 849               	.LFE21:
 851               		.data
 852               	.LC6:
 853 0079 414E 5357 		.string	"ANSWER"
 853      4552 00
 854               	.LC7:
 855 0080 4841 4E47 		.string	"HANGUP"
 855      5550 00
 856               		.text
 857               	.global	incoming_call
 859               	incoming_call:
 860               	.LFB18:
 272:Blue_Rotary-v3.c **** {
 861               		.loc 1 272 0
 862               		.cfi_startproc
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 0 */
 866               	.L__stack_usage = 0
 273:Blue_Rotary-v3.c ****     cbi(PORTC, RING_PWR);	//Power on Ringer Circuit
 867               		.loc 1 273 0
 868 0312 4298      		cbi 40-32,2
 275:Blue_Rotary-v3.c **** 	ring_it();
 869               		.loc 1 275 0
 870 0314 0E94 0000 		call ring_it
 871               	.LVL32:
 872 0318 8CE2      		ldi r24,lo8(300)
 873 031a 91E0      		ldi r25,hi8(300)
 874 031c 00C0      		rjmp .L43
 875               	.LVL33:
 876               	.L48:
 877               	.LBB89:
 279:Blue_Rotary-v3.c ****         if(PINC & (1<<HOOK)) break;	//if the phone is taken off the hook, then get out of here
 878               		.loc 1 279 0
 879 031e 0197      		sbiw r24,1
 276:Blue_Rotary-v3.c ****     for(int i = 0 ; i < 300 ; i++)
 880               		.loc 1 276 0
 881 0320 01F0      		breq .L42
 882               	.LVL34:
 883               	.L43:
 884               	.LBB90:
 885               	.LBB91:
 886               		.loc 2 164 0
 887 0322 AFE1      		 ldi r26,lo8(19999)
 888 0324 BEE4      	    ldi r27,hi8(19999)
 889 0326 1197      	    1:sbiw r26,1
 890 0328 01F4      	    brne 1b
 891 032a 00C0      		rjmp .
 892 032c 0000      		nop
 893               	.LBE91:
 894               	.LBE90:
 279:Blue_Rotary-v3.c ****         if(PINC & (1<<HOOK)) break;	//if the phone is taken off the hook, then get out of here
 895               		.loc 1 279 0
 896 032e 309B      		sbis 38-32,0
 897 0330 00C0      		rjmp .L48
 898               	.L42:
 899               	.LBE89:
 282:Blue_Rotary-v3.c ****     if(PINC & (1<<HOOK))	//The phone has been taken off the hooK
 900               		.loc 1 282 0
 901 0332 309B      		sbis 38-32,0
 902 0334 0895      		ret
 903               	.L49:
 904               	.LVL35:
 905               	.LBB92:
 906               	.LBB93:
 907               		.loc 2 164 0
 908 0336 8FEF      		 ldi r24,lo8(319999)
 909 0338 91EE      	    ldi r25,hi8(319999)
 910 033a A4E0      	    ldi r26,hlo8(319999)
 911 033c 8150      	    1:subi r24,1
 912 033e 9040      	    sbci r25,0
 913 0340 A040      	    sbci r26,0
 914 0342 01F4      	    brne 1b
 915 0344 00C0      		rjmp .
 916 0346 0000      		nop
 917               	.LBE93:
 918               	.LBE92:
 286:Blue_Rotary-v3.c ****         printf("ANSWER\n");				//User the iWRAP command to answer the call
 919               		.loc 1 286 0
 920 0348 80E0      		ldi r24,lo8(.LC6)
 921 034a 90E0      		ldi r25,hi8(.LC6)
 922 034c 0E94 0000 		call puts
 923               	.L45:
 287:Blue_Rotary-v3.c ****         while(PINC & (1<<HOOK)); 		//Wait for user to hang up
 924               		.loc 1 287 0 discriminator 1
 925 0350 3099      		sbic 38-32,0
 926 0352 00C0      		rjmp .L45
 288:Blue_Rotary-v3.c ****         printf("HANGUP\n");
 927               		.loc 1 288 0
 928 0354 80E0      		ldi r24,lo8(.LC7)
 929 0356 90E0      		ldi r25,hi8(.LC7)
 930 0358 0E94 0000 		call puts
 931               	.LVL36:
 932               	.LBB94:
 933               	.LBB95:
 934               		.loc 2 164 0
 935 035c 8FEF      		 ldi r24,lo8(1599999)
 936 035e 99E6      	    ldi r25,hi8(1599999)
 937 0360 A8E1      	    ldi r26,hlo8(1599999)
 938 0362 8150      	    1:subi r24,1
 939 0364 9040      	    sbci r25,0
 940 0366 A040      	    sbci r26,0
 941 0368 01F4      	    brne 1b
 942 036a 00C0      		rjmp .
 943 036c 0000      		nop
 944 036e 0895      		ret
 945               	.LBE95:
 946               	.LBE94:
 947               		.cfi_endproc
 948               	.LFE18:
 950               	.global	short_ring_it
 952               	short_ring_it:
 953               	.LFB22:
 402:Blue_Rotary-v3.c **** 
 403:Blue_Rotary-v3.c **** //Toggle the ring pins at 20Hz or 50ms
 404:Blue_Rotary-v3.c **** //Function:	short_ring_it
 405:Blue_Rotary-v3.c **** //Purpose:	Rings the bell for a shorter period of time than 'ring_it.' Used for notification rings.
 406:Blue_Rotary-v3.c **** //Inputs:	None	
 407:Blue_Rotary-v3.c **** //Outputs:	None
 408:Blue_Rotary-v3.c **** void short_ring_it(void)
 409:Blue_Rotary-v3.c **** {    
 954               		.loc 1 409 0
 955               		.cfi_startproc
 956               	/* prologue: function */
 957               	/* frame size = 0 */
 958               	/* stack size = 0 */
 959               	.L__stack_usage = 0
 410:Blue_Rotary-v3.c ****     LED_ON();
 960               		.loc 1 410 0
 961 0370 4598      		cbi 40-32,5
 962               	.LVL37:
 963               	.LBB96:
 411:Blue_Rotary-v3.c **** 
 412:Blue_Rotary-v3.c ****     for(char i = 0 ; i < 1 ; i++)
 413:Blue_Rotary-v3.c ****     {
 414:Blue_Rotary-v3.c ****         sbi(PORTC, RING1);
 964               		.loc 1 414 0
 965 0372 439A      		sbi 40-32,3
 415:Blue_Rotary-v3.c ****         cbi(PORTC, RING2);
 966               		.loc 1 415 0
 967 0374 4498      		cbi 40-32,4
 968               	.LVL38:
 969               	.LBB97:
 970               	.LBB98:
 971               		.loc 2 164 0
 972 0376 8FE4      		 ldi r24,lo8(-15537)
 973 0378 93EC      	    ldi r25,hi8(-15537)
 974 037a 0197      	    1:sbiw r24,1
 975 037c 01F4      	    brne 1b
 976 037e 00C0      		rjmp .
 977 0380 0000      		nop
 978               	.LBE98:
 979               	.LBE97:
 416:Blue_Rotary-v3.c ****         _delay_ms(25.0);
 417:Blue_Rotary-v3.c ****         
 418:Blue_Rotary-v3.c ****         cbi(PORTC, RING1);
 980               		.loc 1 418 0
 981 0382 4398      		cbi 40-32,3
 419:Blue_Rotary-v3.c ****         sbi(PORTC, RING2);
 982               		.loc 1 419 0
 983 0384 449A      		sbi 40-32,4
 984               	.LVL39:
 985               	.LBB99:
 986               	.LBB100:
 987               		.loc 2 164 0
 988 0386 8FE4      		 ldi r24,lo8(-15537)
 989 0388 93EC      	    ldi r25,hi8(-15537)
 990 038a 0197      	    1:sbiw r24,1
 991 038c 01F4      	    brne 1b
 992 038e 00C0      		rjmp .
 993 0390 0000      		nop
 994               	.LVL40:
 995               	.LBE100:
 996               	.LBE99:
 997               	.LBE96:
 420:Blue_Rotary-v3.c ****         _delay_ms(25.0);
 421:Blue_Rotary-v3.c ****     } 
 422:Blue_Rotary-v3.c **** 
 423:Blue_Rotary-v3.c ****     cbi(PORTC, RING1);
 998               		.loc 1 423 0
 999 0392 4398      		cbi 40-32,3
 424:Blue_Rotary-v3.c ****     cbi(PORTC, RING2);
 1000               		.loc 1 424 0
 1001 0394 4498      		cbi 40-32,4
 425:Blue_Rotary-v3.c **** 
 426:Blue_Rotary-v3.c ****     LED_OFF();
 1002               		.loc 1 426 0
 1003 0396 459A      		sbi 40-32,5
 1004               	/* epilogue start */
 427:Blue_Rotary-v3.c **** }
 1005               		.loc 1 427 0
 1006 0398 0895      		ret
 1007               		.cfi_endproc
 1008               	.LFE22:
 1010               	.global	string_compare
 1012               	string_compare:
 1013               	.LFB23:
 428:Blue_Rotary-v3.c **** 
 429:Blue_Rotary-v3.c **** //Use to find a string within a search string
 430:Blue_Rotary-v3.c **** //search : "hithere\0"
 431:Blue_Rotary-v3.c **** //find : "the\0" - return OK
 432:Blue_Rotary-v3.c **** char string_compare(const char *search_string, const char *find_string)
 433:Blue_Rotary-v3.c **** {
 1014               		.loc 1 433 0
 1015               		.cfi_startproc
 1016               	.LVL41:
 1017               	/* prologue: function */
 1018               	/* frame size = 0 */
 1019               	/* stack size = 0 */
 1020               	.L__stack_usage = 0
 1021 039a FC01      		movw r30,r24
 1022               	.LVL42:
 434:Blue_Rotary-v3.c **** 
 435:Blue_Rotary-v3.c ****     int find_spot, search_spot;
 436:Blue_Rotary-v3.c ****     char spot_character, search_character;
 437:Blue_Rotary-v3.c ****     find_spot = 0;
 438:Blue_Rotary-v3.c **** 
 439:Blue_Rotary-v3.c ****     for(search_spot = 0 ; ; search_spot++)
 440:Blue_Rotary-v3.c ****     {
 441:Blue_Rotary-v3.c ****         if(find_string[find_spot] == '\0') return OK; //We've reached the end of the search string 
 1023               		.loc 1 441 0
 1024 039c DB01      		movw r26,r22
 1025 039e 4C91      		ld r20,X
 1026 03a0 4423      		tst r20
 1027 03a2 01F0      		breq .L55
 442:Blue_Rotary-v3.c ****         if(search_string[search_spot] == '\0') return ERROR; //End of string found
 1028               		.loc 1 442 0
 1029 03a4 2081      		ld r18,Z
 1030 03a6 2223      		tst r18
 1031 03a8 01F0      		breq .L56
 432:Blue_Rotary-v3.c **** char string_compare(const char *search_string, const char *find_string)
 1032               		.loc 1 432 0
 1033 03aa 3196      		adiw r30,1
 1034 03ac 342F      		mov r19,r20
 437:Blue_Rotary-v3.c ****     find_spot = 0;
 1035               		.loc 1 437 0
 1036 03ae 80E0      		ldi r24,lo8(0)
 1037 03b0 90E0      		ldi r25,hi8(0)
 1038               	.LVL43:
 1039 03b2 00C0      		rjmp .L53
 1040               	.LVL44:
 1041               	.L58:
 443:Blue_Rotary-v3.c **** 
 444:Blue_Rotary-v3.c ****         spot_character = find_string[find_spot]; //Compiler limit
 445:Blue_Rotary-v3.c ****         search_character = search_string[search_spot]; //Compiler limit
 446:Blue_Rotary-v3.c **** 
 447:Blue_Rotary-v3.c ****         if(spot_character == search_character) //We found another character
 1042               		.loc 1 447 0
 1043 03b4 342F      		mov r19,r20
 1044               	.LVL45:
 448:Blue_Rotary-v3.c ****             find_spot++; //Look for the next spot in the search string
 449:Blue_Rotary-v3.c ****         else if(find_spot > 0) //No character found, so reset the find_spot
 450:Blue_Rotary-v3.c ****             find_spot = 0;
 1045               		.loc 1 450 0
 1046 03b6 80E0      		ldi r24,lo8(0)
 1047 03b8 90E0      		ldi r25,hi8(0)
 1048               	.L54:
 442:Blue_Rotary-v3.c ****         if(search_string[search_spot] == '\0') return ERROR; //End of string found
 1049               		.loc 1 442 0
 1050 03ba 2191      		ld r18,Z+
 1051               	.LVL46:
 1052 03bc 2223      		tst r18
 1053 03be 01F0      		breq .L57
 1054               	.L53:
 1055               	.LVL47:
 447:Blue_Rotary-v3.c ****         if(spot_character == search_character) //We found another character
 1056               		.loc 1 447 0
 1057 03c0 3217      		cp r19,r18
 1058 03c2 01F4      		brne .L58
 448:Blue_Rotary-v3.c ****             find_spot++; //Look for the next spot in the search string
 1059               		.loc 1 448 0
 1060 03c4 0196      		adiw r24,1
 1061               	.LVL48:
 441:Blue_Rotary-v3.c ****         if(find_string[find_spot] == '\0') return OK; //We've reached the end of the search string 
 1062               		.loc 1 441 0
 1063 03c6 DB01      		movw r26,r22
 1064 03c8 A80F      		add r26,r24
 1065 03ca B91F      		adc r27,r25
 1066 03cc 3C91      		ld r19,X
 1067               	.LVL49:
 1068 03ce 3323      		tst r19
 1069 03d0 01F4      		brne .L54
 1070               	.LVL50:
 1071               	.L55:
 1072 03d2 81E0      		ldi r24,lo8(1)
 1073 03d4 0895      		ret
 1074               	.L57:
 442:Blue_Rotary-v3.c ****         if(search_string[search_spot] == '\0') return ERROR; //End of string found
 1075               		.loc 1 442 0
 1076 03d6 80E0      		ldi r24,lo8(0)
 451:Blue_Rotary-v3.c ****     }
 452:Blue_Rotary-v3.c **** 
 453:Blue_Rotary-v3.c ****     return 0;
 454:Blue_Rotary-v3.c **** }
 1077               		.loc 1 454 0
 1078 03d8 0895      		ret
 1079               	.LVL51:
 1080               	.L56:
 442:Blue_Rotary-v3.c ****         if(search_string[search_spot] == '\0') return ERROR; //End of string found
 1081               		.loc 1 442 0
 1082 03da 80E0      		ldi r24,lo8(0)
 1083               	.LVL52:
 1084 03dc 0895      		ret
 1085               		.cfi_endproc
 1086               	.LFE23:
 1088               	.global	get_rotary_number
 1090               	get_rotary_number:
 1091               	.LFB24:
 455:Blue_Rotary-v3.c **** 
 456:Blue_Rotary-v3.c **** //Function:	get_rotary_number
 457:Blue_Rotary-v3.c **** //Purpose:	Determines which number has been dialed on the phone. Adds the number to the PhoneNumber
 458:Blue_Rotary-v3.c **** //Inputs:	None
 459:Blue_Rotary-v3.c **** //Outputs:	None
 460:Blue_Rotary-v3.c **** char get_rotary_number(void){
 1092               		.loc 1 460 0
 1093               		.cfi_startproc
 1094               	/* prologue: function */
 1095               	/* frame size = 0 */
 1096               	/* stack size = 0 */
 1097               	.L__stack_usage = 0
 1098               	.LVL53:
 1099               	.LBB101:
 1100               	.LBB102:
 1101               		.loc 2 164 0
 1102 03de 8FE7      		 ldi r24,lo8(79999)
 1103 03e0 98E3      	    ldi r25,hi8(79999)
 1104 03e2 A1E0      	    ldi r26,hlo8(79999)
 1105 03e4 8150      	    1:subi r24,1
 1106 03e6 9040      	    sbci r25,0
 1107 03e8 A040      	    sbci r26,0
 1108 03ea 01F4      	    brne 1b
 1109 03ec 00C0      		rjmp .
 1110 03ee 0000      		nop
 1111               	.L60:
 1112               	.LBE102:
 1113               	.LBE101:
 461:Blue_Rotary-v3.c **** 	_delay_ms(50); //Wait for switch to debounce
 462:Blue_Rotary-v3.c **** 	
 463:Blue_Rotary-v3.c **** 	//Count the rotary "spins" until it's done rotating
 464:Blue_Rotary-v3.c **** 	while(PINC & (1<<HOOK))
 1114               		.loc 1 464 0 discriminator 1
 1115 03f0 3099      		sbic 38-32,0
 1116 03f2 00C0      		rjmp .L71
 1117 03f4 00C0      		rjmp .L65
 1118               	.L74:
 465:Blue_Rotary-v3.c **** 	{
 466:Blue_Rotary-v3.c **** 		
 467:Blue_Rotary-v3.c **** 		//Now count how many times the mechnical switch toggles
 468:Blue_Rotary-v3.c **** 		while(((PIND & (1<<ROTARY))!=(1<<ROTARY)) && (PINC & (1<<HOOK)));	
 1119               		.loc 1 468 0 discriminator 2
 1120 03f6 309B      		sbis 38-32,0
 1121 03f8 00C0      		rjmp .L61
 1122               	.L71:
 1123               		.loc 1 468 0 is_stmt 0 discriminator 1
 1124 03fa 4C9B      		sbis 41-32,4
 1125 03fc 00C0      		rjmp .L74
 1126               	.L61:
 1127               	.LVL54:
 1128               	.LBB103:
 1129               	.LBB104:
 1130               		.loc 2 164 0 is_stmt 1
 1131 03fe 8FEF      		 ldi r24,lo8(63999)
 1132 0400 99EF      	    ldi r25,hi8(63999)
 1133 0402 A0E0      	    ldi r26,hlo8(63999)
 1134 0404 8150      	    1:subi r24,1
 1135 0406 9040      	    sbci r25,0
 1136 0408 A040      	    sbci r26,0
 1137 040a 01F4      	    brne 1b
 1138 040c 00C0      		rjmp .
 1139 040e 0000      		nop
 1140               	.LBE104:
 1141               	.LBE103:
 469:Blue_Rotary-v3.c **** 		_delay_ms(40); //Wait for switch to debounce
 470:Blue_Rotary-v3.c **** 		LED_ON();
 1142               		.loc 1 470 0
 1143 0410 4598      		cbi 40-32,5
 471:Blue_Rotary-v3.c **** 		
 472:Blue_Rotary-v3.c **** 		while((PIND & (1<<ROTARY)) && (PINC & (1<<HOOK)));
 1144               		.loc 1 472 0
 1145 0412 00C0      		rjmp .L64
 1146               	.L75:
 1147               		.loc 1 472 0 is_stmt 0 discriminator 2
 1148 0414 309B      		sbis 38-32,0
 1149 0416 00C0      		rjmp .L63
 1150               	.L64:
 1151               		.loc 1 472 0 discriminator 1
 1152 0418 4C99      		sbic 41-32,4
 1153 041a 00C0      		rjmp .L75
 1154               	.L63:
 1155               	.LVL55:
 1156               	.LBB105:
 1157               	.LBB106:
 1158               		.loc 2 164 0 is_stmt 1
 1159 041c 8FEF      		 ldi r24,lo8(63999)
 1160 041e 99EF      	    ldi r25,hi8(63999)
 1161 0420 A0E0      	    ldi r26,hlo8(63999)
 1162 0422 8150      	    1:subi r24,1
 1163 0424 9040      	    sbci r25,0
 1164 0426 A040      	    sbci r26,0
 1165 0428 01F4      	    brne 1b
 1166 042a 00C0      		rjmp .
 1167 042c 0000      		nop
 1168               	.LBE106:
 1169               	.LBE105:
 473:Blue_Rotary-v3.c **** 		_delay_ms(40); //Wait for switch to debounce
 474:Blue_Rotary-v3.c **** 		LED_OFF();  
 1170               		.loc 1 474 0
 1171 042e 459A      		sbi 40-32,5
 475:Blue_Rotary-v3.c **** 		dialed_number++;
 1172               		.loc 1 475 0
 1173 0430 8091 0000 		lds r24,dialed_number
 1174 0434 9091 0000 		lds r25,dialed_number+1
 1175 0438 0196      		adiw r24,1
 1176 043a 9093 0000 		sts dialed_number+1,r25
 1177 043e 8093 0000 		sts dialed_number,r24
 476:Blue_Rotary-v3.c **** 		if(PIND & (1<<EROTARY))break;
 1178               		.loc 1 476 0
 1179 0442 4B9B      		sbis 41-32,3
 1180 0444 00C0      		rjmp .L60
 1181               	.LVL56:
 1182               	.L65:
 477:Blue_Rotary-v3.c **** 
 478:Blue_Rotary-v3.c **** 	}
 479:Blue_Rotary-v3.c ****     //If the phone was put back on the hook, get out of this routine!
 480:Blue_Rotary-v3.c **** 	if((PINC & (1<<HOOK))!=(1<<HOOK)){
 1183               		.loc 1 480 0
 1184 0446 309B      		sbis 38-32,0
 1185 0448 00C0      		rjmp .L76
 481:Blue_Rotary-v3.c **** 		LED_OFF();
 482:Blue_Rotary-v3.c **** 		return 0;
 483:Blue_Rotary-v3.c ****     }
 484:Blue_Rotary-v3.c **** 	
 485:Blue_Rotary-v3.c **** 	//We have a new number!
 486:Blue_Rotary-v3.c **** 	number_length++; //Increase number length by 1 digit
 1186               		.loc 1 486 0
 1187 044a 8091 0000 		lds r24,number_length
 1188 044e 8F5F      		subi r24,lo8(-(1))
 1189 0450 8093 0000 		sts number_length,r24
 487:Blue_Rotary-v3.c ****     if (dialed_number == 10) dialed_number = 0; //Correct for operator call
 1190               		.loc 1 487 0
 1191 0454 8091 0000 		lds r24,dialed_number
 1192 0458 9091 0000 		lds r25,dialed_number+1
 1193 045c 8A30      		cpi r24,10
 1194 045e 9105      		cpc r25,__zero_reg__
 1195 0460 01F0      		breq .L77
 488:Blue_Rotary-v3.c ****     //Let's make sure we counted correctly...
 489:Blue_Rotary-v3.c **** 	if(dialed_number >= 0 && dialed_number <= 9)
 1196               		.loc 1 489 0
 1197 0462 8A30      		cpi r24,10
 1198 0464 9105      		cpc r25,__zero_reg__
 1199 0466 00F0      		brlo .L78
 490:Blue_Rotary-v3.c ****     {
 491:Blue_Rotary-v3.c ****         //Store this number into the array
 492:Blue_Rotary-v3.c ****         phone_number[counter] = dialed_number + '0';
 493:Blue_Rotary-v3.c ****     }
 494:Blue_Rotary-v3.c ****     else
 495:Blue_Rotary-v3.c ****     {
 496:Blue_Rotary-v3.c ****         //Some how we got a bad number - ignore it and try again
 497:Blue_Rotary-v3.c ****         counter--;
 1200               		.loc 1 497 0
 1201 0468 8091 0000 		lds r24,counter
 1202 046c 9091 0000 		lds r25,counter+1
 1203 0470 0197      		sbiw r24,1
 1204 0472 9093 0000 		sts counter+1,r25
 1205 0476 8093 0000 		sts counter,r24
 498:Blue_Rotary-v3.c ****     }
 499:Blue_Rotary-v3.c **** 	return 1;
 1206               		.loc 1 499 0
 1207 047a 81E0      		ldi r24,lo8(1)
 500:Blue_Rotary-v3.c **** }
 1208               		.loc 1 500 0
 1209 047c 0895      		ret
 1210               	.L76:
 481:Blue_Rotary-v3.c **** 		LED_OFF();
 1211               		.loc 1 481 0
 1212 047e 459A      		sbi 40-32,5
 482:Blue_Rotary-v3.c **** 		return 0;
 1213               		.loc 1 482 0
 1214 0480 80E0      		ldi r24,lo8(0)
 1215 0482 0895      		ret
 1216               	.L77:
 487:Blue_Rotary-v3.c ****     if (dialed_number == 10) dialed_number = 0; //Correct for operator call
 1217               		.loc 1 487 0 discriminator 1
 1218 0484 1092 0000 		sts dialed_number+1,__zero_reg__
 1219 0488 1092 0000 		sts dialed_number,__zero_reg__
 1220 048c 80E3      		ldi r24,lo8(48)
 1221               	.L69:
 492:Blue_Rotary-v3.c ****         phone_number[counter] = dialed_number + '0';
 1222               		.loc 1 492 0
 1223 048e E091 0000 		lds r30,counter
 1224 0492 F091 0000 		lds r31,counter+1
 1225 0496 E050      		subi r30,lo8(-(phone_number))
 1226 0498 F040      		sbci r31,hi8(-(phone_number))
 1227 049a 8083      		st Z,r24
 499:Blue_Rotary-v3.c **** 	return 1;
 1228               		.loc 1 499 0
 1229 049c 81E0      		ldi r24,lo8(1)
 1230 049e 0895      		ret
 1231               	.L78:
 489:Blue_Rotary-v3.c **** 	if(dialed_number >= 0 && dialed_number <= 9)
 1232               		.loc 1 489 0
 1233 04a0 805D      		subi r24,lo8(-(48))
 1234 04a2 00C0      		rjmp .L69
 1235               		.cfi_endproc
 1236               	.LFE24:
 1238               		.data
 1239               	.LC8:
 1240 0087 0A41 5444 		.string	"\nATD"
 1240      00
 1241               	.LC9:
 1242 008c 3B00      		.string	";"
 1243               		.text
 1244               	.global	dial_number
 1246               	dial_number:
 1247               	.LFB25:
 501:Blue_Rotary-v3.c **** 
 502:Blue_Rotary-v3.c **** //Function:	dial_number
 503:Blue_Rotary-v3.c **** //Purpose:	Dials the number recorded in the get_rotary_number routine
 504:Blue_Rotary-v3.c **** //Inputs:	None
 505:Blue_Rotary-v3.c **** //Outputs:	None
 506:Blue_Rotary-v3.c **** void dial_number(void){
 1248               		.loc 1 506 0
 1249               		.cfi_startproc
 1250               	/* prologue: function */
 1251               	/* frame size = 0 */
 1252               	/* stack size = 0 */
 1253               	.L__stack_usage = 0
 507:Blue_Rotary-v3.c ****     if(PINC & (1<<HOOK)) //Make sure we still have the phone off hook
 1254               		.loc 1 507 0
 1255 04a4 309B      		sbis 38-32,0
 1256 04a6 0895      		ret
 1257               	.L86:
 508:Blue_Rotary-v3.c ****     {
 509:Blue_Rotary-v3.c ****         //Once we are here, we have the number, time to send it to the cell phone
 510:Blue_Rotary-v3.c ****         //May need to establish an SCO connection
 511:Blue_Rotary-v3.c **** 
 512:Blue_Rotary-v3.c ****         printf("\nATD");	//Do I need the \r leading?
 1258               		.loc 1 512 0
 1259 04a8 00D0      		rcall .
 1260               	.LCFI27:
 1261               		.cfi_def_cfa_offset 4
 1262 04aa 80E0      		ldi r24,lo8(.LC8)
 1263 04ac 90E0      		ldi r25,hi8(.LC8)
 1264 04ae EDB7      		in r30,__SP_L__
 1265 04b0 FEB7      		in r31,__SP_H__
 1266 04b2 9283      		std Z+2,r25
 1267 04b4 8183      		std Z+1,r24
 1268               		.cfi_escape 0x2e,0x2
 1269 04b6 0E94 0000 		call printf
 513:Blue_Rotary-v3.c **** 	// \r is automatically put in!
 514:Blue_Rotary-v3.c ****         for(counter = 0; counter < number_length ; counter++)
 1270               		.loc 1 514 0
 1271 04ba 1092 0000 		sts counter+1,__zero_reg__
 1272 04be 1092 0000 		sts counter,__zero_reg__
 1273 04c2 0F90      		pop __tmp_reg__
 1274 04c4 0F90      		pop __tmp_reg__
 1275               	.LCFI28:
 1276               		.cfi_def_cfa_offset 2
 1277 04c6 8091 0000 		lds r24,number_length
 1278 04ca 8823      		tst r24
 1279 04cc 01F0      		breq .L81
 1280 04ce 80E0      		ldi r24,lo8(0)
 1281 04d0 90E0      		ldi r25,hi8(0)
 1282               	.L82:
 515:Blue_Rotary-v3.c ****             printf("%c", phone_number[counter]);
 1283               		.loc 1 515 0 discriminator 2
 1284 04d2 8050      		subi r24,lo8(-(phone_number))
 1285 04d4 9040      		sbci r25,hi8(-(phone_number))
 1286 04d6 FC01      		movw r30,r24
 1287 04d8 8081      		ld r24,Z
 1288 04da 90E0      		ldi r25,lo8(0)
 1289               		.cfi_escape 0x2e,0
 1290 04dc 0E94 0000 		call putchar
 514:Blue_Rotary-v3.c ****         for(counter = 0; counter < number_length ; counter++)
 1291               		.loc 1 514 0 discriminator 2
 1292 04e0 8091 0000 		lds r24,counter
 1293 04e4 9091 0000 		lds r25,counter+1
 1294 04e8 0196      		adiw r24,1
 1295 04ea 9093 0000 		sts counter+1,r25
 1296 04ee 8093 0000 		sts counter,r24
 1297 04f2 2091 0000 		lds r18,number_length
 1298 04f6 30E0      		ldi r19,lo8(0)
 1299 04f8 8217      		cp r24,r18
 1300 04fa 9307      		cpc r25,r19
 1301 04fc 04F0      		brlt .L82
 1302               	.L81:
 516:Blue_Rotary-v3.c ****         printf(";\n");		//Should this be \r or \n?
 1303               		.loc 1 516 0
 1304 04fe 80E0      		ldi r24,lo8(.LC9)
 1305 0500 90E0      		ldi r25,hi8(.LC9)
 1306 0502 0E94 0000 		call puts
 1307               	.L83:
 517:Blue_Rotary-v3.c **** 	
 518:Blue_Rotary-v3.c ****         while(PINC & (1<<HOOK)); //Wait for user to hang up the phone
 1308               		.loc 1 518 0 discriminator 1
 1309 0506 3099      		sbic 38-32,0
 1310 0508 00C0      		rjmp .L83
 1311 050a 0895      		ret
 1312               		.cfi_endproc
 1313               	.LFE25:
 1315               		.data
 1316               	.LC10:
 1317 008e 4E4F 2043 		.string	"NO CARRIER 0"
 1317      4152 5249 
 1317      4552 2030 
 1317      00
 1318               		.text
 1319               	.global	place_call
 1321               	place_call:
 1322               	.LFB20:
 312:Blue_Rotary-v3.c **** {
 1323               		.loc 1 312 0
 1324               		.cfi_startproc
 1325 050c CF93      		push r28
 1326               	.LCFI29:
 1327               		.cfi_def_cfa_offset 3
 1328               		.cfi_offset 28, -2
 1329 050e DF93      		push r29
 1330               	.LCFI30:
 1331               		.cfi_def_cfa_offset 4
 1332               		.cfi_offset 29, -3
 1333               	/* prologue: function */
 1334               	/* frame size = 0 */
 1335               	/* stack size = 2 */
 1336               	.L__stack_usage = 2
 313:Blue_Rotary-v3.c ****     LED_ON();
 1337               		.loc 1 313 0
 1338 0510 4598      		cbi 40-32,5
 316:Blue_Rotary-v3.c **** 	UCSR0B &= ~(1<<RXCIE0);
 1339               		.loc 1 316 0
 1340 0512 8091 C100 		lds r24,193
 1341 0516 8F77      		andi r24,lo8(127)
 1342 0518 8093 C100 		sts 193,r24
 318:Blue_Rotary-v3.c ****     TCCR0B |= (1<<CS00);
 1343               		.loc 1 318 0
 1344 051c 85B5      		in r24,69-32
 1345 051e 8160      		ori r24,lo8(1)
 1346 0520 85BD      		out 69-32,r24
 1347               	.L111:
 319:Blue_Rotary-v3.c ****     while(PIND & (1<<EROTARY)){	//If the Rotary starts spinning, get out of the dial tone
 1348               		.loc 1 319 0 discriminator 1
 1349 0522 4B9B      		sbis 41-32,3
 1350 0524 00C0      		rjmp .L112
 321:Blue_Rotary-v3.c **** 		if((PINC & (1<<HOOK))!=(1<<HOOK)){	//If the phone is back on the hook, stop the dial tone and exi
 1351               		.loc 1 321 0
 1352 0526 309B      		sbis 38-32,0
 1353 0528 00C0      		rjmp .L113
 330:Blue_Rotary-v3.c **** 			if(message_complete){
 1354               		.loc 1 330 0
 1355 052a 8091 0000 		lds r24,message_complete
 1356 052e 8823      		tst r24
 1357 0530 01F0      		breq .L111
 331:Blue_Rotary-v3.c **** 				cli();
 1358               		.loc 1 331 0
 1359               	/* #APP */
 1360               	 ;  331 "Blue_Rotary-v3.c" 1
 1361 0532 F894      		cli
 1362               	 ;  0 "" 2
 332:Blue_Rotary-v3.c **** 				message_complete=0;
 1363               		.loc 1 332 0
 1364               	/* #NOAPP */
 1365 0534 1092 0000 		sts message_complete,__zero_reg__
 333:Blue_Rotary-v3.c **** 				message_index=0;
 1366               		.loc 1 333 0
 1367 0538 1092 0000 		sts message_index+1,__zero_reg__
 1368 053c 1092 0000 		sts message_index,__zero_reg__
 1369               	.LVL57:
 1370 0540 C0E0      		ldi r28,lo8(final_message)
 1371 0542 D0E0      		ldi r29,hi8(final_message)
 1372 0544 DE01      		movw r26,r28
 334:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 1373               		.loc 1 334 0
 1374 0546 80E0      		ldi r24,lo8(0)
 1375 0548 90E0      		ldi r25,hi8(0)
 1376               	.LVL58:
 1377               	.L92:
 1378               	.LBB107:
 334:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 1379               		.loc 1 334 0 is_stmt 0 discriminator 2
 1380 054a FC01      		movw r30,r24
 1381 054c E050      		subi r30,lo8(-(message))
 1382 054e F040      		sbci r31,hi8(-(message))
 1383 0550 2081      		ld r18,Z
 1384 0552 2D93      		st X+,r18
 1385 0554 0196      		adiw r24,1
 1386               	.LVL59:
 1387 0556 8639      		cpi r24,150
 1388 0558 9105      		cpc r25,__zero_reg__
 1389 055a 01F4      		brne .L92
 334:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 1390               		.loc 1 334 0
 1391 055c 80E0      		ldi r24,lo8(0)
 1392 055e 90E0      		ldi r25,hi8(0)
 1393               	.LVL60:
 1394               	.L93:
 1395               	.LBE107:
 1396               	.LBB108:
 335:Blue_Rotary-v3.c **** 				for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1397               		.loc 1 335 0 is_stmt 1 discriminator 2
 1398 0560 FC01      		movw r30,r24
 1399 0562 E050      		subi r30,lo8(-(message))
 1400 0564 F040      		sbci r31,hi8(-(message))
 1401 0566 1082      		st Z,__zero_reg__
 1402 0568 0196      		adiw r24,1
 1403               	.LVL61:
 1404 056a 8639      		cpi r24,150
 1405 056c 9105      		cpc r25,__zero_reg__
 1406 056e 01F4      		brne .L93
 1407               	.LBE108:
 336:Blue_Rotary-v3.c **** 				sei();
 1408               		.loc 1 336 0
 1409               	/* #APP */
 1410               	 ;  336 "Blue_Rotary-v3.c" 1
 1411 0570 7894      		sei
 1412               	 ;  0 "" 2
 337:Blue_Rotary-v3.c **** 				if(string_compare(final_message, "NO CARRIER 0")){
 1413               		.loc 1 337 0
 1414               	/* #NOAPP */
 1415 0572 80E0      		ldi r24,lo8(final_message)
 1416 0574 90E0      		ldi r25,hi8(final_message)
 1417               	.LVL62:
 1418 0576 60E0      		ldi r22,lo8(.LC10)
 1419 0578 70E0      		ldi r23,hi8(.LC10)
 1420 057a 0E94 0000 		call string_compare
 1421 057e 8823      		tst r24
 1422 0580 01F0      		breq .L111
 1423 0582 80E0      		ldi r24,lo8(0)
 1424 0584 90E0      		ldi r25,hi8(0)
 1425               	.L94:
 1426               	.LBB109:
 338:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1427               		.loc 1 338 0 discriminator 2
 1428 0586 FC01      		movw r30,r24
 1429 0588 E050      		subi r30,lo8(-(message))
 1430 058a F040      		sbci r31,hi8(-(message))
 1431 058c 1082      		st Z,__zero_reg__
 1432 058e 0196      		adiw r24,1
 1433               	.LVL63:
 1434 0590 8639      		cpi r24,150
 1435 0592 9105      		cpc r25,__zero_reg__
 1436 0594 01F4      		brne .L94
 1437               	.L103:
 1438               	.LBE109:
 1439               	.LBB110:
 339:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 1440               		.loc 1 339 0 discriminator 2
 1441 0596 1992      		st Y+,__zero_reg__
 1442 0598 20E0      		ldi r18,hi8(final_message+150)
 1443 059a C030      		cpi r28,lo8(final_message+150)
 1444 059c D207      		cpc r29,r18
 1445 059e 01F4      		brne .L103
 1446               	.LBE110:
 340:Blue_Rotary-v3.c **** 					connected=0;
 1447               		.loc 1 340 0
 1448 05a0 1092 0000 		sts connected+1,__zero_reg__
 1449 05a4 1092 0000 		sts connected,__zero_reg__
 341:Blue_Rotary-v3.c **** 					message_complete=0;
 1450               		.loc 1 341 0
 1451 05a8 1092 0000 		sts message_complete,__zero_reg__
 1452               	/* epilogue start */
 374:Blue_Rotary-v3.c **** }
 1453               		.loc 1 374 0
 1454 05ac DF91      		pop r29
 1455 05ae CF91      		pop r28
 1456 05b0 0895      		ret
 1457               	.LVL64:
 1458               	.L112:
 347:Blue_Rotary-v3.c ****     UCSR0B |= (1<<RXCIE0);
 1459               		.loc 1 347 0
 1460 05b2 8091 C100 		lds r24,193
 1461 05b6 8068      		ori r24,lo8(-128)
 1462 05b8 8093 C100 		sts 193,r24
 348:Blue_Rotary-v3.c ****     TCCR0B &= ~(1<<CS00);
 1463               		.loc 1 348 0
 1464 05bc 85B5      		in r24,69-32
 1465 05be 8E7F      		andi r24,lo8(-2)
 1466 05c0 85BD      		out 69-32,r24
 350:Blue_Rotary-v3.c ****     number_length = 0;
 1467               		.loc 1 350 0
 1468 05c2 1092 0000 		sts number_length,__zero_reg__
 351:Blue_Rotary-v3.c ****     dialed_number = 0;
 1469               		.loc 1 351 0
 1470 05c6 1092 0000 		sts dialed_number+1,__zero_reg__
 1471 05ca 1092 0000 		sts dialed_number,__zero_reg__
 352:Blue_Rotary-v3.c ****     counter = 0;	
 1472               		.loc 1 352 0
 1473 05ce 1092 0000 		sts counter+1,__zero_reg__
 1474 05d2 1092 0000 		sts counter,__zero_reg__
 353:Blue_Rotary-v3.c **** 	get_number_timeout=0;
 1475               		.loc 1 353 0
 1476 05d6 1092 0000 		sts get_number_timeout+1,__zero_reg__
 1477 05da 1092 0000 		sts get_number_timeout,__zero_reg__
 354:Blue_Rotary-v3.c **** 	if(get_rotary_number()){	//If a number was dialed, then keep looking for numbers
 1478               		.loc 1 354 0
 1479 05de 0E94 0000 		call get_rotary_number
 1480 05e2 8823      		tst r24
 1481 05e4 01F0      		breq .L97
 355:Blue_Rotary-v3.c **** 		counter++;
 1482               		.loc 1 355 0
 1483 05e6 2091 0000 		lds r18,counter
 1484 05ea 3091 0000 		lds r19,counter+1
 1485 05ee 2F5F      		subi r18,lo8(-(1))
 1486 05f0 3F4F      		sbci r19,hi8(-(1))
 1487 05f2 3093 0000 		sts counter+1,r19
 1488 05f6 2093 0000 		sts counter,r18
 356:Blue_Rotary-v3.c **** 		while(get_number_timeout < 40){	//Make sure we haven't reached the 4 second timeout
 1489               		.loc 1 356 0
 1490 05fa 8091 0000 		lds r24,get_number_timeout
 1491 05fe 9091 0000 		lds r25,get_number_timeout+1
 1492 0602 8832      		cpi r24,40
 1493 0604 9105      		cpc r25,__zero_reg__
 1494 0606 04F0      		brlt .L104
 368:Blue_Rotary-v3.c **** 		if(counter > 0)dial_number();
 1495               		.loc 1 368 0
 1496 0608 1216      		cp __zero_reg__,r18
 1497 060a 1306      		cpc __zero_reg__,r19
 1498 060c 04F4      		brge .L97
 1499               	.L116:
 368:Blue_Rotary-v3.c **** 		if(counter > 0)dial_number();
 1500               		.loc 1 368 0 is_stmt 0 discriminator 1
 1501 060e 0E94 0000 		call dial_number
 1502               	.L97:
 370:Blue_Rotary-v3.c **** 	printf("HANGUP\n");	//After dialing number, wait for the phone to go on the hook and then hang up.
 1503               		.loc 1 370 0 is_stmt 1
 1504 0612 80E0      		ldi r24,lo8(.LC7)
 1505 0614 90E0      		ldi r25,hi8(.LC7)
 1506 0616 0E94 0000 		call puts
 371:Blue_Rotary-v3.c ****     get_number_timeout=0;
 1507               		.loc 1 371 0
 1508 061a 1092 0000 		sts get_number_timeout+1,__zero_reg__
 1509 061e 1092 0000 		sts get_number_timeout,__zero_reg__
 1510               	.LVL65:
 1511               	.LBB111:
 1512               	.LBB112:
 1513               		.loc 2 164 0
 1514 0622 8FEF      		 ldi r24,lo8(1599999)
 1515 0624 99E6      	    ldi r25,hi8(1599999)
 1516 0626 A8E1      	    ldi r26,hlo8(1599999)
 1517 0628 8150      	    1:subi r24,1
 1518 062a 9040      	    sbci r25,0
 1519 062c A040      	    sbci r26,0
 1520 062e 01F4      	    brne 1b
 1521 0630 00C0      		rjmp .
 1522 0632 0000      		nop
 1523               	.LBE112:
 1524               	.LBE111:
 373:Blue_Rotary-v3.c **** 	LED_OFF();
 1525               		.loc 1 373 0
 1526 0634 459A      		sbi 40-32,5
 1527               	/* epilogue start */
 374:Blue_Rotary-v3.c **** }
 1528               		.loc 1 374 0
 1529 0636 DF91      		pop r29
 1530 0638 CF91      		pop r28
 1531 063a 0895      		ret
 1532               	.LVL66:
 1533               	.L117:
 361:Blue_Rotary-v3.c **** 				if(get_rotary_number())counter++; //Wait for user to start dialing
 1534               		.loc 1 361 0
 1535 063c 0E94 0000 		call get_rotary_number
 1536 0640 8823      		tst r24
 1537 0642 01F0      		breq .L100
 361:Blue_Rotary-v3.c **** 				if(get_rotary_number())counter++; //Wait for user to start dialing
 1538               		.loc 1 361 0 is_stmt 0 discriminator 1
 1539 0644 8091 0000 		lds r24,counter
 1540 0648 9091 0000 		lds r25,counter+1
 1541 064c 0196      		adiw r24,1
 1542 064e 9093 0000 		sts counter+1,r25
 1543 0652 8093 0000 		sts counter,r24
 1544               	.L100:
 1545 0656 80E0      		ldi r24,lo8(0)
 1546 0658 90E0      		ldi r25,hi8(0)
 1547               	.L99:
 1548               	.LVL67:
 1549               	.LBB113:
 1550               	.LBB114:
 1551               		.loc 2 164 0 is_stmt 1
 1552 065a 2FEF      		 ldi r18,lo8(159999)
 1553 065c 30E7      	    ldi r19,hi8(159999)
 1554 065e 42E0      	    ldi r20,hlo8(159999)
 1555 0660 2150      	    1:subi r18,1
 1556 0662 3040      	    sbci r19,0
 1557 0664 4040      	    sbci r20,0
 1558 0666 01F4      	    brne 1b
 1559 0668 00C0      		rjmp .
 1560 066a 0000      		nop
 1561               	.LBE114:
 1562               	.LBE113:
 365:Blue_Rotary-v3.c **** 			get_number_timeout++;
 1563               		.loc 1 365 0
 1564 066c 0196      		adiw r24,1
 1565 066e 9093 0000 		sts get_number_timeout+1,r25
 1566 0672 8093 0000 		sts get_number_timeout,r24
 356:Blue_Rotary-v3.c **** 		while(get_number_timeout < 40){	//Make sure we haven't reached the 4 second timeout
 1567               		.loc 1 356 0
 1568 0676 8832      		cpi r24,40
 1569 0678 9105      		cpc r25,__zero_reg__
 1570 067a 04F4      		brge .L114
 1571               	.LVL68:
 1572               	.L104:
 357:Blue_Rotary-v3.c **** 			dialed_number = 0;
 1573               		.loc 1 357 0
 1574 067c 1092 0000 		sts dialed_number+1,__zero_reg__
 1575 0680 1092 0000 		sts dialed_number,__zero_reg__
 360:Blue_Rotary-v3.c **** 			if((PIND & (1<<EROTARY)) != (1<<EROTARY)){
 1576               		.loc 1 360 0
 1577 0684 4B99      		sbic 41-32,3
 1578 0686 00C0      		rjmp .L99
 1579 0688 00C0      		rjmp .L117
 1580               	.L113:
 322:Blue_Rotary-v3.c **** 			UCSR0B |= (1<<RXCIE0);					//because there is no number to be dialed.
 1581               		.loc 1 322 0
 1582 068a 8091 C100 		lds r24,193
 1583 068e 8068      		ori r24,lo8(-128)
 1584 0690 8093 C100 		sts 193,r24
 324:Blue_Rotary-v3.c ****             TCCR0B &= ~(1<<CS00);
 1585               		.loc 1 324 0
 1586 0694 85B5      		in r24,69-32
 1587 0696 8E7F      		andi r24,lo8(-2)
 1588 0698 85BD      		out 69-32,r24
 325:Blue_Rotary-v3.c **** 			LED_OFF();
 1589               		.loc 1 325 0
 1590 069a 459A      		sbi 40-32,5
 1591               	/* epilogue start */
 374:Blue_Rotary-v3.c **** }
 1592               		.loc 1 374 0
 1593 069c DF91      		pop r29
 1594 069e CF91      		pop r28
 1595 06a0 0895      		ret
 1596               	.LVL69:
 1597               	.L114:
 356:Blue_Rotary-v3.c **** 		while(get_number_timeout < 40){	//Make sure we haven't reached the 4 second timeout
 1598               		.loc 1 356 0
 1599 06a2 2091 0000 		lds r18,counter
 1600 06a6 3091 0000 		lds r19,counter+1
 368:Blue_Rotary-v3.c **** 		if(counter > 0)dial_number();
 1601               		.loc 1 368 0
 1602 06aa 1216      		cp __zero_reg__,r18
 1603 06ac 1306      		cpc __zero_reg__,r19
 1604 06ae 04F4      		brge .+2
 1605 06b0 00C0      		rjmp .L116
 1606 06b2 00C0      		rjmp .L97
 1607               		.cfi_endproc
 1608               	.LFE20:
 1610               		.data
 1611               	.LC11:
 1612 009b 5249 4E47 		.string	"RING"
 1612      00
 1613               	.LC12:
 1614 00a0 4846 5020 		.string	"HFP 0 RING"
 1614      3020 5249 
 1614      4E47 00
 1615               		.section	.text.startup,"ax",@progbits
 1616               	.global	main
 1618               	main:
 1619               	.LFB12:
  74:Blue_Rotary-v3.c **** {	
 1620               		.loc 1 74 0
 1621               		.cfi_startproc
 1622               	/* prologue: function */
 1623               	/* frame size = 0 */
 1624               	/* stack size = 0 */
 1625               	.L__stack_usage = 0
  76:Blue_Rotary-v3.c ****     ioinit();
 1626               		.loc 1 76 0
 1627 0000 0E94 0000 		call ioinit
  79:Blue_Rotary-v3.c **** 	cbi(PORTD, BT_RES);	//Bring module out of reset 
 1628               		.loc 1 79 0
 1629 0004 5A98      		cbi 43-32,2
  80:Blue_Rotary-v3.c **** 	sbi(PORTC, BT_EN);	//Enable module
 1630               		.loc 1 80 0
 1631 0006 419A      		sbi 40-32,1
  81:Blue_Rotary-v3.c **** 	LED_ON();
 1632               		.loc 1 81 0
 1633 0008 4598      		cbi 40-32,5
 1634               	.LVL70:
 1635               	.LBB115:
 1636               	.LBB116:
 1637               		.loc 2 164 0
 1638 000a 2FEF      		 ldi r18,lo8(799999)
 1639 000c 34E3      	    ldi r19,hi8(799999)
 1640 000e 4CE0      	    ldi r20,hlo8(799999)
 1641 0010 2150      	    1:subi r18,1
 1642 0012 3040      	    sbci r19,0
 1643 0014 4040      	    sbci r20,0
 1644 0016 01F4      	    brne 1b
 1645 0018 00C0      		rjmp .
 1646 001a 0000      		nop
 1647               	.LBE116:
 1648               	.LBE115:
  83:Blue_Rotary-v3.c **** 	LED_OFF();
 1649               		.loc 1 83 0
 1650 001c 459A      		sbi 40-32,5
  84:Blue_Rotary-v3.c **** 	cbi(PORTC, RING_PWR);//Let the ringer "Warm Up"
 1651               		.loc 1 84 0
 1652 001e 4298      		cbi 40-32,2
 1653               	.LVL71:
 1654               	.LBB117:
 1655               	.LBB118:
 1656               		.loc 2 164 0
 1657 0020 8FEF      		 ldi r24,lo8(3199999)
 1658 0022 93ED      	    ldi r25,hi8(3199999)
 1659 0024 A0E3      	    ldi r26,hlo8(3199999)
 1660 0026 8150      	    1:subi r24,1
 1661 0028 9040      	    sbci r25,0
 1662 002a A040      	    sbci r26,0
 1663 002c 01F4      	    brne 1b
 1664 002e 00C0      		rjmp .
 1665 0030 0000      		nop
 1666               	.LBE118:
 1667               	.LBE117:
  86:Blue_Rotary-v3.c **** 	config_bluetooth();	//Put Blue Giga WT32 module into HFP mode
 1668               		.loc 1 86 0
 1669 0032 0E94 0000 		call config_bluetooth
  87:Blue_Rotary-v3.c **** 	short_ring_it();	//Give notification to user that bootup process is complete
 1670               		.loc 1 87 0
 1671 0036 0E94 0000 		call short_ring_it
 1672 003a 8091 0000 		lds r24,connected
 1673 003e 9091 0000 		lds r25,connected+1
 119:Blue_Rotary-v3.c **** 				connected=1;	//Set the connected flag to notify program of status
 1674               		.loc 1 119 0
 1675 0042 01E0      		ldi r16,lo8(1)
 1676 0044 10E0      		ldi r17,hi8(1)
 1677               	.L158:
  91:Blue_Rotary-v3.c **** 		while(!connected)	//Until we're connected to a phone, listen for incoming connections
 1678               		.loc 1 91 0 discriminator 1
 1679 0046 0097      		sbiw r24,0
 1680 0048 01F0      		breq .+2
 1681 004a 00C0      		rjmp .L159
 1682               	.L128:
  93:Blue_Rotary-v3.c **** 			LED_ON();
 1683               		.loc 1 93 0
 1684 004c 4598      		cbi 40-32,5
 1685               	.LVL72:
  96:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1686               		.loc 1 96 0
 1687 004e 80E0      		ldi r24,lo8(0)
 1688 0050 90E0      		ldi r25,hi8(0)
 1689               	.LVL73:
 1690               	.L120:
 1691               	.LBB119:
  96:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1692               		.loc 1 96 0 is_stmt 0 discriminator 2
 1693 0052 FC01      		movw r30,r24
 1694 0054 E050      		subi r30,lo8(-(message))
 1695 0056 F040      		sbci r31,hi8(-(message))
 1696 0058 1082      		st Z,__zero_reg__
 1697 005a 0196      		adiw r24,1
 1698               	.LVL74:
 1699 005c 8639      		cpi r24,150
 1700 005e 9105      		cpc r25,__zero_reg__
 1701 0060 01F4      		brne .L120
  96:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1702               		.loc 1 96 0
 1703 0062 A0E0      		ldi r26,lo8(final_message)
 1704 0064 B0E0      		ldi r27,hi8(final_message)
 1705               	.LBE119:
  73:Blue_Rotary-v3.c **** int main (void)
 1706               		.loc 1 73 0 is_stmt 1
 1707 0066 FD01      		movw r30,r26
 1708               	.L121:
 1709               	.LBB120:
  97:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 1710               		.loc 1 97 0 discriminator 2
 1711 0068 1192      		st Z+,__zero_reg__
 1712 006a 90E0      		ldi r25,hi8(final_message+150)
 1713 006c E030      		cpi r30,lo8(final_message+150)
 1714 006e F907      		cpc r31,r25
 1715 0070 01F4      		brne .L121
 1716               	.LBE120:
  98:Blue_Rotary-v3.c **** 			message_index=0;
 1717               		.loc 1 98 0
 1718 0072 1092 0000 		sts message_index+1,__zero_reg__
 1719 0076 1092 0000 		sts message_index,__zero_reg__
  99:Blue_Rotary-v3.c **** 			message_complete=0;		
 1720               		.loc 1 99 0
 1721 007a 1092 0000 		sts message_complete,__zero_reg__
 101:Blue_Rotary-v3.c **** 			sei();		//Start looking for messages from Bluetooth
 1722               		.loc 1 101 0
 1723               	/* #APP */
 1724               	 ;  101 "Blue_Rotary-v3.c" 1
 1725 007e 7894      		sei
 1726               	 ;  0 "" 2
 103:Blue_Rotary-v3.c **** 			while(!message_complete){	//NOTE: Message is received in the UART interrupt
 1727               		.loc 1 103 0
 1728               	/* #NOAPP */
 1729 0080 8091 0000 		lds r24,message_complete
 1730               	.LVL75:
 1731 0084 8823      		tst r24
 1732 0086 01F4      		brne .L122
 1733               	.L144:
 1734               	.LVL76:
 1735               	.LBB121:
 1736               	.LBB122:
 1737               		.loc 2 164 0
 1738 0088 2FEF      		 ldi r18,lo8(639999)
 1739 008a 33EC      	    ldi r19,hi8(639999)
 1740 008c 49E0      	    ldi r20,hlo8(639999)
 1741 008e 2150      	    1:subi r18,1
 1742 0090 3040      	    sbci r19,0
 1743 0092 4040      	    sbci r20,0
 1744 0094 01F4      	    brne 1b
 1745 0096 00C0      		rjmp .
 1746 0098 0000      		nop
 1747               	.LBE122:
 1748               	.LBE121:
 105:Blue_Rotary-v3.c **** 				LED_OFF();
 1749               		.loc 1 105 0
 1750 009a 459A      		sbi 40-32,5
 1751               	.LVL77:
 1752               	.LBB123:
 1753               	.LBB124:
 1754               		.loc 2 164 0
 1755 009c 2FEF      		 ldi r18,lo8(159999)
 1756 009e 30E7      	    ldi r19,hi8(159999)
 1757 00a0 42E0      	    ldi r20,hlo8(159999)
 1758 00a2 2150      	    1:subi r18,1
 1759 00a4 3040      	    sbci r19,0
 1760 00a6 4040      	    sbci r20,0
 1761 00a8 01F4      	    brne 1b
 1762 00aa 00C0      		rjmp .
 1763 00ac 0000      		nop
 1764               	.LBE124:
 1765               	.LBE123:
 107:Blue_Rotary-v3.c **** 				LED_ON();
 1766               		.loc 1 107 0
 1767 00ae 4598      		cbi 40-32,5
 103:Blue_Rotary-v3.c **** 			while(!message_complete){	//NOTE: Message is received in the UART interrupt
 1768               		.loc 1 103 0
 1769 00b0 8091 0000 		lds r24,message_complete
 1770 00b4 8823      		tst r24
 1771 00b6 01F0      		breq .L144
 1772               	.LVL78:
 1773               	.L122:
 109:Blue_Rotary-v3.c **** 			cli();		//Stop looking for messages while we process this one!
 1774               		.loc 1 109 0
 1775               	/* #APP */
 1776               	 ;  109 "Blue_Rotary-v3.c" 1
 1777 00b8 F894      		cli
 1778               	 ;  0 "" 2
 111:Blue_Rotary-v3.c **** 			message_complete=0;
 1779               		.loc 1 111 0
 1780               	/* #NOAPP */
 1781 00ba 1092 0000 		sts message_complete,__zero_reg__
 112:Blue_Rotary-v3.c **** 			message_index=0;
 1782               		.loc 1 112 0
 1783 00be 1092 0000 		sts message_index+1,__zero_reg__
 1784 00c2 1092 0000 		sts message_index,__zero_reg__
 1785               	.LVL79:
 114:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];			
 1786               		.loc 1 114 0
 1787 00c6 80E0      		ldi r24,lo8(0)
 1788 00c8 90E0      		ldi r25,hi8(0)
 1789               	.LVL80:
 1790               	.L124:
 1791               	.LBB125:
 114:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];			
 1792               		.loc 1 114 0 is_stmt 0 discriminator 2
 1793 00ca FC01      		movw r30,r24
 1794 00cc E050      		subi r30,lo8(-(message))
 1795 00ce F040      		sbci r31,hi8(-(message))
 1796 00d0 2081      		ld r18,Z
 1797 00d2 2D93      		st X+,r18
 1798 00d4 0196      		adiw r24,1
 1799               	.LVL81:
 1800 00d6 8639      		cpi r24,150
 1801 00d8 9105      		cpc r25,__zero_reg__
 1802 00da 01F4      		brne .L124
 114:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];			
 1803               		.loc 1 114 0
 1804 00dc 80E0      		ldi r24,lo8(0)
 1805 00de 90E0      		ldi r25,hi8(0)
 1806               	.LVL82:
 1807               	.L125:
 1808               	.LBE125:
 1809               	.LBB126:
 115:Blue_Rotary-v3.c **** 			for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1810               		.loc 1 115 0 is_stmt 1 discriminator 2
 1811 00e0 FC01      		movw r30,r24
 1812 00e2 E050      		subi r30,lo8(-(message))
 1813 00e4 F040      		sbci r31,hi8(-(message))
 1814 00e6 1082      		st Z,__zero_reg__
 1815 00e8 0196      		adiw r24,1
 1816               	.LVL83:
 1817 00ea 8639      		cpi r24,150
 1818 00ec 9105      		cpc r25,__zero_reg__
 1819 00ee 01F4      		brne .L125
 1820               	.LBE126:
 118:Blue_Rotary-v3.c **** 			if(string_compare(final_message, "RING")){			
 1821               		.loc 1 118 0
 1822 00f0 80E0      		ldi r24,lo8(final_message)
 1823 00f2 90E0      		ldi r25,hi8(final_message)
 1824               	.LVL84:
 1825 00f4 60E0      		ldi r22,lo8(.LC11)
 1826 00f6 70E0      		ldi r23,hi8(.LC11)
 1827 00f8 0E94 0000 		call string_compare
 1828 00fc 8823      		tst r24
 1829 00fe 01F0      		breq .+2
 1830 0100 00C0      		rjmp .L126
 1831               	.L160:
 122:Blue_Rotary-v3.c **** 				short_ring_it();
 1832               		.loc 1 122 0
 1833 0102 8091 0000 		lds r24,connected
 1834 0106 9091 0000 		lds r25,connected+1
  91:Blue_Rotary-v3.c **** 		while(!connected)	//Until we're connected to a phone, listen for incoming connections
 1835               		.loc 1 91 0
 1836 010a 0097      		sbiw r24,0
 1837 010c 01F4      		brne .+2
 1838 010e 00C0      		rjmp .L128
 1839               	.LVL85:
 1840               	.L159:
 127:Blue_Rotary-v3.c **** 		while(connected){	//If we're connected, stay in this 'routine' until we're disconnected
 1841               		.loc 1 127 0 discriminator 1
 1842 0110 0097      		sbiw r24,0
 1843 0112 01F4      		brne .+2
 1844 0114 00C0      		rjmp .L158
 128:Blue_Rotary-v3.c **** 			LED_ON();
 1845               		.loc 1 128 0
 1846 0116 4598      		cbi 40-32,5
 129:Blue_Rotary-v3.c **** 			sei();
 1847               		.loc 1 129 0
 1848               	/* #APP */
 1849               	 ;  129 "Blue_Rotary-v3.c" 1
 1850 0118 7894      		sei
 1851               	 ;  0 "" 2
 1852               	/* #NOAPP */
 1853               	.L157:
 130:Blue_Rotary-v3.c **** 			while((PINC & (1<<HOOK))!=(1<<HOOK)) //Wait for user to lift phone off hook
 1854               		.loc 1 130 0 discriminator 1
 1855 011a 3099      		sbic 38-32,0
 1856 011c 00C0      		rjmp .L138
 133:Blue_Rotary-v3.c **** 				if(message_complete){
 1857               		.loc 1 133 0
 1858 011e 8091 0000 		lds r24,message_complete
 1859 0122 8823      		tst r24
 1860 0124 01F0      		breq .L157
 134:Blue_Rotary-v3.c **** 					cli();
 1861               		.loc 1 134 0
 1862               	/* #APP */
 1863               	 ;  134 "Blue_Rotary-v3.c" 1
 1864 0126 F894      		cli
 1865               	 ;  0 "" 2
 135:Blue_Rotary-v3.c **** 					message_complete=0;
 1866               		.loc 1 135 0
 1867               	/* #NOAPP */
 1868 0128 1092 0000 		sts message_complete,__zero_reg__
 136:Blue_Rotary-v3.c **** 					message_index=0;
 1869               		.loc 1 136 0
 1870 012c 1092 0000 		sts message_index+1,__zero_reg__
 1871 0130 1092 0000 		sts message_index,__zero_reg__
 1872               	.LVL86:
 1873 0134 C0E0      		ldi r28,lo8(final_message)
 1874 0136 D0E0      		ldi r29,hi8(final_message)
 1875 0138 DE01      		movw r26,r28
 137:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 1876               		.loc 1 137 0
 1877 013a 80E0      		ldi r24,lo8(0)
 1878 013c 90E0      		ldi r25,hi8(0)
 1879               	.LVL87:
 1880               	.L132:
 1881               	.LBB127:
 137:Blue_Rotary-v3.c **** 					for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i] = message[i];
 1882               		.loc 1 137 0 is_stmt 0 discriminator 2
 1883 013e FC01      		movw r30,r24
 1884 0140 E050      		subi r30,lo8(-(message))
 1885 0142 F040      		sbci r31,hi8(-(message))
 1886 0144 2081      		ld r18,Z
 1887 0146 2D93      		st X+,r18
 1888 0148 0196      		adiw r24,1
 1889               	.LVL88:
 1890 014a 8639      		cpi r24,150
 1891 014c 9105      		cpc r25,__zero_reg__
 1892 014e 01F4      		brne .L132
 1893               	.LBE127:
 138:Blue_Rotary-v3.c **** 					LED_OFF();
 1894               		.loc 1 138 0 is_stmt 1
 1895 0150 459A      		sbi 40-32,5
 139:Blue_Rotary-v3.c **** 					sei();
 1896               		.loc 1 139 0
 1897               	/* #APP */
 1898               	 ;  139 "Blue_Rotary-v3.c" 1
 1899 0152 7894      		sei
 1900               	 ;  0 "" 2
 141:Blue_Rotary-v3.c **** 					if(string_compare(final_message, "HFP 0 RING")){
 1901               		.loc 1 141 0
 1902               	/* #NOAPP */
 1903 0154 80E0      		ldi r24,lo8(final_message)
 1904 0156 90E0      		ldi r25,hi8(final_message)
 1905               	.LVL89:
 1906 0158 60E0      		ldi r22,lo8(.LC12)
 1907 015a 70E0      		ldi r23,hi8(.LC12)
 1908 015c 0E94 0000 		call string_compare
 1909 0160 8823      		tst r24
 1910 0162 01F4      		brne .L162
 1911               	.L133:
 147:Blue_Rotary-v3.c **** 					if(string_compare(final_message, "NO CARRIER 0")){
 1912               		.loc 1 147 0
 1913 0164 80E0      		ldi r24,lo8(final_message)
 1914 0166 90E0      		ldi r25,hi8(final_message)
 1915 0168 60E0      		ldi r22,lo8(.LC10)
 1916 016a 70E0      		ldi r23,hi8(.LC10)
 1917 016c 0E94 0000 		call string_compare
 1918 0170 8823      		tst r24
 1919 0172 01F0      		breq .L157
 1920 0174 80E0      		ldi r24,lo8(0)
 1921 0176 90E0      		ldi r25,hi8(0)
 1922               	.L136:
 1923               	.LBB128:
 148:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1924               		.loc 1 148 0 discriminator 2
 1925 0178 FC01      		movw r30,r24
 1926 017a E050      		subi r30,lo8(-(message))
 1927 017c F040      		sbci r31,hi8(-(message))
 1928 017e 1082      		st Z,__zero_reg__
 1929 0180 0196      		adiw r24,1
 1930               	.LVL90:
 1931 0182 8639      		cpi r24,150
 1932 0184 9105      		cpc r25,__zero_reg__
 1933 0186 01F4      		brne .L136
 1934               	.L145:
 1935               	.LBE128:
 1936               	.LBB129:
 149:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 1937               		.loc 1 149 0 discriminator 2
 1938 0188 1992      		st Y+,__zero_reg__
 1939 018a A0E0      		ldi r26,hi8(final_message+150)
 1940 018c C030      		cpi r28,lo8(final_message+150)
 1941 018e DA07      		cpc r29,r26
 1942 0190 01F4      		brne .L145
 1943               	.LBE129:
 150:Blue_Rotary-v3.c **** 						connected=0;	//We're no longer connected to a BT module!
 1944               		.loc 1 150 0
 1945 0192 1092 0000 		sts connected+1,__zero_reg__
 1946 0196 1092 0000 		sts connected,__zero_reg__
 151:Blue_Rotary-v3.c **** 						message_complete=0;
 1947               		.loc 1 151 0
 1948 019a 1092 0000 		sts message_complete,__zero_reg__
 1949               	.LVL91:
 1950               	.LBB130:
 1951               	.LBB131:
 1952               		.loc 2 164 0
 1953 019e 2FEF      		 ldi r18,lo8(319999)
 1954 01a0 31EE      	    ldi r19,hi8(319999)
 1955 01a2 44E0      	    ldi r20,hlo8(319999)
 1956 01a4 2150      	    1:subi r18,1
 1957 01a6 3040      	    sbci r19,0
 1958 01a8 4040      	    sbci r20,0
 1959 01aa 01F4      	    brne 1b
 1960 01ac 00C0      		rjmp .
 1961 01ae 0000      		nop
 1962               	.LVL92:
 1963               	.L138:
 1964               	.LBE131:
 1965               	.LBE130:
 160:Blue_Rotary-v3.c **** 			if(PINC & (1<<HOOK)){
 1966               		.loc 1 160 0
 1967 01b0 3099      		sbic 38-32,0
 1968 01b2 00C0      		rjmp .L140
 1969               	.L161:
 161:Blue_Rotary-v3.c **** 				place_call(); //We need to dial out
 1970               		.loc 1 161 0
 1971 01b4 8091 0000 		lds r24,connected
 1972 01b8 9091 0000 		lds r25,connected+1
 1973 01bc 00C0      		rjmp .L159
 1974               	.L162:
 142:Blue_Rotary-v3.c **** 						incoming_call();	//If we're getting a RING, then answer the phone
 1975               		.loc 1 142 0
 1976 01be 0E94 0000 		call incoming_call
 1977               	.LVL93:
  73:Blue_Rotary-v3.c **** int main (void)
 1978               		.loc 1 73 0
 1979 01c2 E0E0      		ldi r30,lo8(final_message)
 1980 01c4 F0E0      		ldi r31,hi8(final_message)
 1981               	.LVL94:
 1982               	.L134:
 1983               	.LBB132:
 143:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 1984               		.loc 1 143 0 discriminator 2
 1985 01c6 1192      		st Z+,__zero_reg__
 1986 01c8 90E0      		ldi r25,hi8(final_message+150)
 1987 01ca E030      		cpi r30,lo8(final_message+150)
 1988 01cc F907      		cpc r31,r25
 1989 01ce 01F4      		brne .L134
 143:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)final_message[i]='\0';
 1990               		.loc 1 143 0 is_stmt 0
 1991 01d0 80E0      		ldi r24,lo8(0)
 1992 01d2 90E0      		ldi r25,hi8(0)
 1993               	.L135:
 1994               	.LBE132:
 1995               	.LBB133:
 144:Blue_Rotary-v3.c **** 						for(int i=0; i<MAX_MESSAGE_LENGTH;i++)message[i]='\0';
 1996               		.loc 1 144 0 is_stmt 1 discriminator 2
 1997 01d4 FC01      		movw r30,r24
 1998 01d6 E050      		subi r30,lo8(-(message))
 1999 01d8 F040      		sbci r31,hi8(-(message))
 2000 01da 1082      		st Z,__zero_reg__
 2001 01dc 0196      		adiw r24,1
 2002               	.LVL95:
 2003 01de 8639      		cpi r24,150
 2004 01e0 9105      		cpc r25,__zero_reg__
 2005 01e2 01F4      		brne .L135
 2006 01e4 00C0      		rjmp .L133
 2007               	.LVL96:
 2008               	.L140:
 2009               	.LBE133:
 161:Blue_Rotary-v3.c **** 				place_call(); //We need to dial out
 2010               		.loc 1 161 0
 2011 01e6 0E94 0000 		call place_call
 2012 01ea 00C0      		rjmp .L161
 2013               	.L126:
 119:Blue_Rotary-v3.c **** 				connected=1;	//Set the connected flag to notify program of status
 2014               		.loc 1 119 0
 2015 01ec 1093 0000 		sts connected+1,r17
 2016 01f0 0093 0000 		sts connected,r16
 120:Blue_Rotary-v3.c **** 				short_ring_it();	//Give user notification of established connection
 2017               		.loc 1 120 0
 2018 01f4 0E94 0000 		call short_ring_it
 2019               	.LVL97:
 2020               	.LBB134:
 2021               	.LBB135:
 2022               		.loc 2 164 0
 2023 01f8 8FE7      		 ldi r24,lo8(399999)
 2024 01fa 9AE1      	    ldi r25,hi8(399999)
 2025 01fc A6E0      	    ldi r26,hlo8(399999)
 2026 01fe 8150      	    1:subi r24,1
 2027 0200 9040      	    sbci r25,0
 2028 0202 A040      	    sbci r26,0
 2029 0204 01F4      	    brne 1b
 2030 0206 00C0      		rjmp .
 2031 0208 0000      		nop
 2032               	.LBE135:
 2033               	.LBE134:
 122:Blue_Rotary-v3.c **** 				short_ring_it();
 2034               		.loc 1 122 0
 2035 020a 0E94 0000 		call short_ring_it
 2036 020e 00C0      		rjmp .L160
 2037               		.cfi_endproc
 2038               	.LFE12:
 2040               	.global	location_440
 2041               	.global	location_440
 2042               		.section .bss
 2045               	location_440:
 2046 0000 0000      		.skip 2,0
 2047               	.global	location_350
 2048               	.global	location_350
 2051               	location_350:
 2052 0002 0000      		.skip 2,0
 2053               	.global	connected
 2054               	.global	connected
 2057               	connected:
 2058 0004 0000      		.skip 2,0
 2059               		.comm phone_number,20,1
 2060               		.comm temp,1,1
 2061               		.comm number_length,1,1
 2062               	.global	get_number_timeout
 2063               	.global	get_number_timeout
 2066               	get_number_timeout:
 2067 0006 0000      		.skip 2,0
 2068               		.comm counter,2,1
 2069               		.comm dialed_number,2,1
 2070               	.global	message_index
 2071               	.global	message_index
 2074               	message_index:
 2075 0008 0000      		.skip 2,0
 2076               		.comm final_message,150,1
 2077               		.comm ring_tone_flag,1,1
 2078               		.comm message_complete,1,1
 2079               		.comm message,150,1
 2080               	.global	sine_table
 2081               		.section	.progmem.data,"a",@progbits
 2084               	sine_table:
 2085 0000 80        		.byte	-128
 2086 0001 81        		.byte	-127
 2087 0002 83        		.byte	-125
 2088 0003 84        		.byte	-124
 2089 0004 86        		.byte	-122
 2090 0005 87        		.byte	-121
 2091 0006 89        		.byte	-119
 2092 0007 8A        		.byte	-118
 2093 0008 8C        		.byte	-116
 2094 0009 8E        		.byte	-114
 2095 000a 8F        		.byte	-113
 2096 000b 91        		.byte	-111
 2097 000c 92        		.byte	-110
 2098 000d 94        		.byte	-108
 2099 000e 95        		.byte	-107
 2100 000f 97        		.byte	-105
 2101 0010 98        		.byte	-104
 2102 0011 9A        		.byte	-102
 2103 0012 9B        		.byte	-101
 2104 0013 9D        		.byte	-99
 2105 0014 9F        		.byte	-97
 2106 0015 A0        		.byte	-96
 2107 0016 A2        		.byte	-94
 2108 0017 A3        		.byte	-93
 2109 0018 A5        		.byte	-91
 2110 0019 A6        		.byte	-90
 2111 001a A8        		.byte	-88
 2112 001b A9        		.byte	-87
 2113 001c AB        		.byte	-85
 2114 001d AC        		.byte	-84
 2115 001e AD        		.byte	-83
 2116 001f AF        		.byte	-81
 2117 0020 B0        		.byte	-80
 2118 0021 B2        		.byte	-78
 2119 0022 B3        		.byte	-77
 2120 0023 B5        		.byte	-75
 2121 0024 B6        		.byte	-74
 2122 0025 B8        		.byte	-72
 2123 0026 B9        		.byte	-71
 2124 0027 BA        		.byte	-70
 2125 0028 BC        		.byte	-68
 2126 0029 BD        		.byte	-67
 2127 002a BE        		.byte	-66
 2128 002b C0        		.byte	-64
 2129 002c C1        		.byte	-63
 2130 002d C3        		.byte	-61
 2131 002e C4        		.byte	-60
 2132 002f C5        		.byte	-59
 2133 0030 C6        		.byte	-58
 2134 0031 C8        		.byte	-56
 2135 0032 C9        		.byte	-55
 2136 0033 CA        		.byte	-54
 2137 0034 CC        		.byte	-52
 2138 0035 CD        		.byte	-51
 2139 0036 CE        		.byte	-50
 2140 0037 CF        		.byte	-49
 2141 0038 D1        		.byte	-47
 2142 0039 D2        		.byte	-46
 2143 003a D3        		.byte	-45
 2144 003b D4        		.byte	-44
 2145 003c D5        		.byte	-43
 2146 003d D6        		.byte	-42
 2147 003e D8        		.byte	-40
 2148 003f D9        		.byte	-39
 2149 0040 DA        		.byte	-38
 2150 0041 DB        		.byte	-37
 2151 0042 DC        		.byte	-36
 2152 0043 DD        		.byte	-35
 2153 0044 DE        		.byte	-34
 2154 0045 DF        		.byte	-33
 2155 0046 E0        		.byte	-32
 2156 0047 E1        		.byte	-31
 2157 0048 E2        		.byte	-30
 2158 0049 E3        		.byte	-29
 2159 004a E4        		.byte	-28
 2160 004b E5        		.byte	-27
 2161 004c E6        		.byte	-26
 2162 004d E7        		.byte	-25
 2163 004e E8        		.byte	-24
 2164 004f E9        		.byte	-23
 2165 0050 EA        		.byte	-22
 2166 0051 EB        		.byte	-21
 2167 0052 EB        		.byte	-21
 2168 0053 EC        		.byte	-20
 2169 0054 ED        		.byte	-19
 2170 0055 EE        		.byte	-18
 2171 0056 EF        		.byte	-17
 2172 0057 EF        		.byte	-17
 2173 0058 F0        		.byte	-16
 2174 0059 F1        		.byte	-15
 2175 005a F2        		.byte	-14
 2176 005b F2        		.byte	-14
 2177 005c F3        		.byte	-13
 2178 005d F4        		.byte	-12
 2179 005e F4        		.byte	-12
 2180 005f F5        		.byte	-11
 2181 0060 F5        		.byte	-11
 2182 0061 F6        		.byte	-10
 2183 0062 F7        		.byte	-9
 2184 0063 F7        		.byte	-9
 2185 0064 F8        		.byte	-8
 2186 0065 F8        		.byte	-8
 2187 0066 F9        		.byte	-7
 2188 0067 F9        		.byte	-7
 2189 0068 FA        		.byte	-6
 2190 0069 FA        		.byte	-6
 2191 006a FA        		.byte	-6
 2192 006b FB        		.byte	-5
 2193 006c FB        		.byte	-5
 2194 006d FC        		.byte	-4
 2195 006e FC        		.byte	-4
 2196 006f FC        		.byte	-4
 2197 0070 FD        		.byte	-3
 2198 0071 FD        		.byte	-3
 2199 0072 FD        		.byte	-3
 2200 0073 FD        		.byte	-3
 2201 0074 FE        		.byte	-2
 2202 0075 FE        		.byte	-2
 2203 0076 FE        		.byte	-2
 2204 0077 FE        		.byte	-2
 2205 0078 FE        		.byte	-2
 2206 0079 FF        		.byte	-1
 2207 007a FF        		.byte	-1
 2208 007b FF        		.byte	-1
 2209 007c FF        		.byte	-1
 2210 007d FF        		.byte	-1
 2211 007e FF        		.byte	-1
 2212 007f FF        		.byte	-1
 2213 0080 FF        		.byte	-1
 2214 0081 FF        		.byte	-1
 2215 0082 FF        		.byte	-1
 2216 0083 FF        		.byte	-1
 2217 0084 FF        		.byte	-1
 2218 0085 FF        		.byte	-1
 2219 0086 FF        		.byte	-1
 2220 0087 FE        		.byte	-2
 2221 0088 FE        		.byte	-2
 2222 0089 FE        		.byte	-2
 2223 008a FE        		.byte	-2
 2224 008b FE        		.byte	-2
 2225 008c FE        		.byte	-2
 2226 008d FD        		.byte	-3
 2227 008e FD        		.byte	-3
 2228 008f FD        		.byte	-3
 2229 0090 FC        		.byte	-4
 2230 0091 FC        		.byte	-4
 2231 0092 FC        		.byte	-4
 2232 0093 FB        		.byte	-5
 2233 0094 FB        		.byte	-5
 2234 0095 FB        		.byte	-5
 2235 0096 FA        		.byte	-6
 2236 0097 FA        		.byte	-6
 2237 0098 F9        		.byte	-7
 2238 0099 F9        		.byte	-7
 2239 009a F8        		.byte	-8
 2240 009b F8        		.byte	-8
 2241 009c F7        		.byte	-9
 2242 009d F7        		.byte	-9
 2243 009e F6        		.byte	-10
 2244 009f F6        		.byte	-10
 2245 00a0 F5        		.byte	-11
 2246 00a1 F4        		.byte	-12
 2247 00a2 F4        		.byte	-12
 2248 00a3 F3        		.byte	-13
 2249 00a4 F3        		.byte	-13
 2250 00a5 F2        		.byte	-14
 2251 00a6 F1        		.byte	-15
 2252 00a7 F0        		.byte	-16
 2253 00a8 F0        		.byte	-16
 2254 00a9 EF        		.byte	-17
 2255 00aa EE        		.byte	-18
 2256 00ab ED        		.byte	-19
 2257 00ac ED        		.byte	-19
 2258 00ad EC        		.byte	-20
 2259 00ae EB        		.byte	-21
 2260 00af EA        		.byte	-22
 2261 00b0 E9        		.byte	-23
 2262 00b1 E8        		.byte	-24
 2263 00b2 E7        		.byte	-25
 2264 00b3 E7        		.byte	-25
 2265 00b4 E6        		.byte	-26
 2266 00b5 E5        		.byte	-27
 2267 00b6 E4        		.byte	-28
 2268 00b7 E3        		.byte	-29
 2269 00b8 E2        		.byte	-30
 2270 00b9 E1        		.byte	-31
 2271 00ba E0        		.byte	-32
 2272 00bb DF        		.byte	-33
 2273 00bc DE        		.byte	-34
 2274 00bd DD        		.byte	-35
 2275 00be DB        		.byte	-37
 2276 00bf DA        		.byte	-38
 2277 00c0 D9        		.byte	-39
 2278 00c1 D8        		.byte	-40
 2279 00c2 D7        		.byte	-41
 2280 00c3 D6        		.byte	-42
 2281 00c4 D5        		.byte	-43
 2282 00c5 D4        		.byte	-44
 2283 00c6 D2        		.byte	-46
 2284 00c7 D1        		.byte	-47
 2285 00c8 D0        		.byte	-48
 2286 00c9 CF        		.byte	-49
 2287 00ca CD        		.byte	-51
 2288 00cb CC        		.byte	-52
 2289 00cc CB        		.byte	-53
 2290 00cd CA        		.byte	-54
 2291 00ce C8        		.byte	-56
 2292 00cf C7        		.byte	-57
 2293 00d0 C6        		.byte	-58
 2294 00d1 C4        		.byte	-60
 2295 00d2 C3        		.byte	-61
 2296 00d3 C2        		.byte	-62
 2297 00d4 C0        		.byte	-64
 2298 00d5 BF        		.byte	-65
 2299 00d6 BE        		.byte	-66
 2300 00d7 BC        		.byte	-68
 2301 00d8 BB        		.byte	-69
 2302 00d9 BA        		.byte	-70
 2303 00da B8        		.byte	-72
 2304 00db B7        		.byte	-73
 2305 00dc B5        		.byte	-75
 2306 00dd B4        		.byte	-76
 2307 00de B3        		.byte	-77
 2308 00df B1        		.byte	-79
 2309 00e0 B0        		.byte	-80
 2310 00e1 AE        		.byte	-82
 2311 00e2 AD        		.byte	-83
 2312 00e3 AB        		.byte	-85
 2313 00e4 AA        		.byte	-86
 2314 00e5 A8        		.byte	-88
 2315 00e6 A7        		.byte	-89
 2316 00e7 A5        		.byte	-91
 2317 00e8 A4        		.byte	-92
 2318 00e9 A2        		.byte	-94
 2319 00ea A1        		.byte	-95
 2320 00eb 9F        		.byte	-97
 2321 00ec 9E        		.byte	-98
 2322 00ed 9C        		.byte	-100
 2323 00ee 9B        		.byte	-101
 2324 00ef 99        		.byte	-103
 2325 00f0 98        		.byte	-104
 2326 00f1 96        		.byte	-106
 2327 00f2 95        		.byte	-107
 2328 00f3 93        		.byte	-109
 2329 00f4 91        		.byte	-111
 2330 00f5 90        		.byte	-112
 2331 00f6 8E        		.byte	-114
 2332 00f7 8D        		.byte	-115
 2333 00f8 8B        		.byte	-117
 2334 00f9 8A        		.byte	-118
 2335 00fa 88        		.byte	-120
 2336 00fb 87        		.byte	-121
 2337 00fc 85        		.byte	-123
 2338 00fd 83        		.byte	-125
 2339 00fe 82        		.byte	-126
 2340 00ff 80        		.byte	-128
 2341 0100 7F        		.byte	127
 2342 0101 7D        		.byte	125
 2343 0102 7C        		.byte	124
 2344 0103 7A        		.byte	122
 2345 0104 78        		.byte	120
 2346 0105 77        		.byte	119
 2347 0106 75        		.byte	117
 2348 0107 74        		.byte	116
 2349 0108 72        		.byte	114
 2350 0109 71        		.byte	113
 2351 010a 6F        		.byte	111
 2352 010b 6E        		.byte	110
 2353 010c 6C        		.byte	108
 2354 010d 6A        		.byte	106
 2355 010e 69        		.byte	105
 2356 010f 67        		.byte	103
 2357 0110 66        		.byte	102
 2358 0111 64        		.byte	100
 2359 0112 63        		.byte	99
 2360 0113 61        		.byte	97
 2361 0114 60        		.byte	96
 2362 0115 5E        		.byte	94
 2363 0116 5D        		.byte	93
 2364 0117 5B        		.byte	91
 2365 0118 5A        		.byte	90
 2366 0119 58        		.byte	88
 2367 011a 57        		.byte	87
 2368 011b 55        		.byte	85
 2369 011c 54        		.byte	84
 2370 011d 52        		.byte	82
 2371 011e 51        		.byte	81
 2372 011f 4F        		.byte	79
 2373 0120 4E        		.byte	78
 2374 0121 4C        		.byte	76
 2375 0122 4B        		.byte	75
 2376 0123 4A        		.byte	74
 2377 0124 48        		.byte	72
 2378 0125 47        		.byte	71
 2379 0126 45        		.byte	69
 2380 0127 44        		.byte	68
 2381 0128 43        		.byte	67
 2382 0129 41        		.byte	65
 2383 012a 40        		.byte	64
 2384 012b 3F        		.byte	63
 2385 012c 3D        		.byte	61
 2386 012d 3C        		.byte	60
 2387 012e 3B        		.byte	59
 2388 012f 39        		.byte	57
 2389 0130 38        		.byte	56
 2390 0131 37        		.byte	55
 2391 0132 35        		.byte	53
 2392 0133 34        		.byte	52
 2393 0134 33        		.byte	51
 2394 0135 32        		.byte	50
 2395 0136 30        		.byte	48
 2396 0137 2F        		.byte	47
 2397 0138 2E        		.byte	46
 2398 0139 2D        		.byte	45
 2399 013a 2B        		.byte	43
 2400 013b 2A        		.byte	42
 2401 013c 29        		.byte	41
 2402 013d 28        		.byte	40
 2403 013e 27        		.byte	39
 2404 013f 26        		.byte	38
 2405 0140 25        		.byte	37
 2406 0141 24        		.byte	36
 2407 0142 22        		.byte	34
 2408 0143 21        		.byte	33
 2409 0144 20        		.byte	32
 2410 0145 1F        		.byte	31
 2411 0146 1E        		.byte	30
 2412 0147 1D        		.byte	29
 2413 0148 1C        		.byte	28
 2414 0149 1B        		.byte	27
 2415 014a 1A        		.byte	26
 2416 014b 19        		.byte	25
 2417 014c 18        		.byte	24
 2418 014d 18        		.byte	24
 2419 014e 17        		.byte	23
 2420 014f 16        		.byte	22
 2421 0150 15        		.byte	21
 2422 0151 14        		.byte	20
 2423 0152 13        		.byte	19
 2424 0153 12        		.byte	18
 2425 0154 12        		.byte	18
 2426 0155 11        		.byte	17
 2427 0156 10        		.byte	16
 2428 0157 0F        		.byte	15
 2429 0158 0F        		.byte	15
 2430 0159 0E        		.byte	14
 2431 015a 0D        		.byte	13
 2432 015b 0C        		.byte	12
 2433 015c 0C        		.byte	12
 2434 015d 0B        		.byte	11
 2435 015e 0B        		.byte	11
 2436 015f 0A        		.byte	10
 2437 0160 09        		.byte	9
 2438 0161 09        		.byte	9
 2439 0162 08        		.byte	8
 2440 0163 08        		.byte	8
 2441 0164 07        		.byte	7
 2442 0165 07        		.byte	7
 2443 0166 06        		.byte	6
 2444 0167 06        		.byte	6
 2445 0168 05        		.byte	5
 2446 0169 05        		.byte	5
 2447 016a 04        		.byte	4
 2448 016b 04        		.byte	4
 2449 016c 04        		.byte	4
 2450 016d 03        		.byte	3
 2451 016e 03        		.byte	3
 2452 016f 03        		.byte	3
 2453 0170 02        		.byte	2
 2454 0171 02        		.byte	2
 2455 0172 02        		.byte	2
 2456 0173 01        		.byte	1
 2457 0174 01        		.byte	1
 2458 0175 01        		.byte	1
 2459 0176 01        		.byte	1
 2460 0177 01        		.byte	1
 2461 0178 01        		.byte	1
 2462 0179 00        		.byte	0
 2463 017a 00        		.byte	0
 2464 017b 00        		.byte	0
 2465 017c 00        		.byte	0
 2466 017d 00        		.byte	0
 2467 017e 00        		.byte	0
 2468 017f 00        		.byte	0
 2469 0180 00        		.byte	0
 2470 0181 00        		.byte	0
 2471 0182 00        		.byte	0
 2472 0183 00        		.byte	0
 2473 0184 00        		.byte	0
 2474 0185 00        		.byte	0
 2475 0186 00        		.byte	0
 2476 0187 01        		.byte	1
 2477 0188 01        		.byte	1
 2478 0189 01        		.byte	1
 2479 018a 01        		.byte	1
 2480 018b 01        		.byte	1
 2481 018c 02        		.byte	2
 2482 018d 02        		.byte	2
 2483 018e 02        		.byte	2
 2484 018f 02        		.byte	2
 2485 0190 03        		.byte	3
 2486 0191 03        		.byte	3
 2487 0192 03        		.byte	3
 2488 0193 04        		.byte	4
 2489 0194 04        		.byte	4
 2490 0195 05        		.byte	5
 2491 0196 05        		.byte	5
 2492 0197 05        		.byte	5
 2493 0198 06        		.byte	6
 2494 0199 06        		.byte	6
 2495 019a 07        		.byte	7
 2496 019b 07        		.byte	7
 2497 019c 08        		.byte	8
 2498 019d 08        		.byte	8
 2499 019e 09        		.byte	9
 2500 019f 0A        		.byte	10
 2501 01a0 0A        		.byte	10
 2502 01a1 0B        		.byte	11
 2503 01a2 0B        		.byte	11
 2504 01a3 0C        		.byte	12
 2505 01a4 0D        		.byte	13
 2506 01a5 0D        		.byte	13
 2507 01a6 0E        		.byte	14
 2508 01a7 0F        		.byte	15
 2509 01a8 10        		.byte	16
 2510 01a9 10        		.byte	16
 2511 01aa 11        		.byte	17
 2512 01ab 12        		.byte	18
 2513 01ac 13        		.byte	19
 2514 01ad 14        		.byte	20
 2515 01ae 14        		.byte	20
 2516 01af 15        		.byte	21
 2517 01b0 16        		.byte	22
 2518 01b1 17        		.byte	23
 2519 01b2 18        		.byte	24
 2520 01b3 19        		.byte	25
 2521 01b4 1A        		.byte	26
 2522 01b5 1B        		.byte	27
 2523 01b6 1C        		.byte	28
 2524 01b7 1D        		.byte	29
 2525 01b8 1E        		.byte	30
 2526 01b9 1F        		.byte	31
 2527 01ba 20        		.byte	32
 2528 01bb 21        		.byte	33
 2529 01bc 22        		.byte	34
 2530 01bd 23        		.byte	35
 2531 01be 24        		.byte	36
 2532 01bf 25        		.byte	37
 2533 01c0 26        		.byte	38
 2534 01c1 27        		.byte	39
 2535 01c2 29        		.byte	41
 2536 01c3 2A        		.byte	42
 2537 01c4 2B        		.byte	43
 2538 01c5 2C        		.byte	44
 2539 01c6 2D        		.byte	45
 2540 01c7 2E        		.byte	46
 2541 01c8 30        		.byte	48
 2542 01c9 31        		.byte	49
 2543 01ca 32        		.byte	50
 2544 01cb 33        		.byte	51
 2545 01cc 35        		.byte	53
 2546 01cd 36        		.byte	54
 2547 01ce 37        		.byte	55
 2548 01cf 39        		.byte	57
 2549 01d0 3A        		.byte	58
 2550 01d1 3B        		.byte	59
 2551 01d2 3C        		.byte	60
 2552 01d3 3E        		.byte	62
 2553 01d4 3F        		.byte	63
 2554 01d5 41        		.byte	65
 2555 01d6 42        		.byte	66
 2556 01d7 43        		.byte	67
 2557 01d8 45        		.byte	69
 2558 01d9 46        		.byte	70
 2559 01da 47        		.byte	71
 2560 01db 49        		.byte	73
 2561 01dc 4A        		.byte	74
 2562 01dd 4C        		.byte	76
 2563 01de 4D        		.byte	77
 2564 01df 4F        		.byte	79
 2565 01e0 50        		.byte	80
 2566 01e1 52        		.byte	82
 2567 01e2 53        		.byte	83
 2568 01e3 54        		.byte	84
 2569 01e4 56        		.byte	86
 2570 01e5 57        		.byte	87
 2571 01e6 59        		.byte	89
 2572 01e7 5A        		.byte	90
 2573 01e8 5C        		.byte	92
 2574 01e9 5D        		.byte	93
 2575 01ea 5F        		.byte	95
 2576 01eb 60        		.byte	96
 2577 01ec 62        		.byte	98
 2578 01ed 64        		.byte	100
 2579 01ee 65        		.byte	101
 2580 01ef 67        		.byte	103
 2581 01f0 68        		.byte	104
 2582 01f1 6A        		.byte	106
 2583 01f2 6B        		.byte	107
 2584 01f3 6D        		.byte	109
 2585 01f4 6E        		.byte	110
 2586 01f5 70        		.byte	112
 2587 01f6 71        		.byte	113
 2588 01f7 73        		.byte	115
 2589 01f8 75        		.byte	117
 2590 01f9 76        		.byte	118
 2591 01fa 78        		.byte	120
 2592 01fb 79        		.byte	121
 2593 01fc 7B        		.byte	123
 2594 01fd 7C        		.byte	124
 2595 01fe 7E        		.byte	126
 2596               		.data
 2599               	mystdout:
 2600 00ab 0000 00   		.skip 3,0
 2601 00ae 02        		.byte	2
 2602 00af 0000 0000 		.skip 4,0
 2603 00b3 0000      		.word	gs(uart_putchar)
 2604 00b5 0000      		.word	0
 2605 00b7 0000      		.word	0
 2606               		.text
 2607               	.Letext0:
 2608               		.file 3 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 2609               		.file 4 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/stdio.h"
 2610               		.file 5 "BlueRotary.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Blue_Rotary-v3.c
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2      *ABS*:0000003f __SREG__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:3      *ABS*:0000003e __SP_H__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:4      *ABS*:0000003d __SP_L__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:5      *ABS*:00000034 __CCP__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:7      *ABS*:00000001 __zero_reg__
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:14     .text:00000000 uart_putchar
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:60     .text:00000024 __vector_18
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2074   .bss:00000008 message_index
                            *COM*:00000096 message
                            *COM*:00000001 message_complete
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:172    .text:000000a8 __vector_16
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:219    .text:000000c4 __vector_14
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2051   .bss:00000002 location_350
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2084   .progmem.data:00000000 sine_table
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:343    .text:00000140 __vector_15
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2045   .bss:00000000 location_440
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:467    .text:000001bc ioinit
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2599   .data:000000ab mystdout
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:554    .text:00000212 config_bluetooth
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:670    .text:0000029e uart_getchar
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:693    .text:000002ac delay_ms
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:740    .text:000002c6 dial_tone
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:780    .text:000002dc ring_it
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:859    .text:00000312 incoming_call
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:952    .text:00000370 short_ring_it
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:1012   .text:0000039a string_compare
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:1090   .text:000003de get_rotary_number
                            *COM*:00000002 dialed_number
                            *COM*:00000001 number_length
                            *COM*:00000002 counter
                            *COM*:00000014 phone_number
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:1246   .text:000004a4 dial_number
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:1321   .text:0000050c place_call
                            *COM*:00000096 final_message
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2057   .bss:00000004 connected
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:2066   .bss:00000006 get_number_timeout
/var/folders/sc/pps508n52mj0zwl3_dqm_f940000gn/T//ccBvpprG.s:1618   .text.startup:00000000 main
                            *COM*:00000001 temp
                            *COM*:00000001 ring_tone_flag

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__iob
puts
printf
putchar
